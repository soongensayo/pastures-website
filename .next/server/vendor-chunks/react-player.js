"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-player";
exports.ids = ["vendor-chunks/react-player"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-player/lib/Player.js":
/*!*************************************************!*\
  !*** ./node_modules/react-player/lib/Player.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Player_exports = {};\n__export(Player_exports, {\n    default: ()=>Player\n});\nmodule.exports = __toCommonJS(Player_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_react_fast_compare = __toESM(__webpack_require__(/*! react-fast-compare */ \"(ssr)/./node_modules/react-fast-compare/index.js\"));\nvar import_props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nvar import_utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nconst SEEK_ON_PLAY_EXPIRY = 5e3;\nclass Player extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"mounted\", false);\n        __publicField(this, \"isReady\", false);\n        __publicField(this, \"isPlaying\", false);\n        // Track playing state internally to prevent bugs\n        __publicField(this, \"isLoading\", true);\n        // Use isLoading to prevent onPause when switching URL\n        __publicField(this, \"loadOnReady\", null);\n        __publicField(this, \"startOnPlay\", true);\n        __publicField(this, \"seekOnPlay\", null);\n        __publicField(this, \"onDurationCalled\", false);\n        __publicField(this, \"handlePlayerMount\", (player)=>{\n            if (this.player) {\n                this.progress();\n                return;\n            }\n            this.player = player;\n            this.player.load(this.props.url);\n            this.progress();\n        });\n        __publicField(this, \"getInternalPlayer\", (key)=>{\n            if (!this.player) return null;\n            return this.player[key];\n        });\n        __publicField(this, \"progress\", ()=>{\n            if (this.props.url && this.player && this.isReady) {\n                const playedSeconds = this.getCurrentTime() || 0;\n                const loadedSeconds = this.getSecondsLoaded();\n                const duration = this.getDuration();\n                if (duration) {\n                    const progress = {\n                        playedSeconds,\n                        played: playedSeconds / duration\n                    };\n                    if (loadedSeconds !== null) {\n                        progress.loadedSeconds = loadedSeconds;\n                        progress.loaded = loadedSeconds / duration;\n                    }\n                    if (progress.playedSeconds !== this.prevPlayed || progress.loadedSeconds !== this.prevLoaded) {\n                        this.props.onProgress(progress);\n                    }\n                    this.prevPlayed = progress.playedSeconds;\n                    this.prevLoaded = progress.loadedSeconds;\n                }\n            }\n            this.progressTimeout = setTimeout(this.progress, this.props.progressFrequency || this.props.progressInterval);\n        });\n        __publicField(this, \"handleReady\", ()=>{\n            if (!this.mounted) return;\n            this.isReady = true;\n            this.isLoading = false;\n            const { onReady, playing, volume, muted } = this.props;\n            onReady();\n            if (!muted && volume !== null) {\n                this.player.setVolume(volume);\n            }\n            if (this.loadOnReady) {\n                this.player.load(this.loadOnReady, true);\n                this.loadOnReady = null;\n            } else if (playing) {\n                this.player.play();\n            }\n            this.handleDurationCheck();\n        });\n        __publicField(this, \"handlePlay\", ()=>{\n            this.isPlaying = true;\n            this.isLoading = false;\n            const { onStart, onPlay, playbackRate } = this.props;\n            if (this.startOnPlay) {\n                if (this.player.setPlaybackRate && playbackRate !== 1) {\n                    this.player.setPlaybackRate(playbackRate);\n                }\n                onStart();\n                this.startOnPlay = false;\n            }\n            onPlay();\n            if (this.seekOnPlay) {\n                this.seekTo(this.seekOnPlay);\n                this.seekOnPlay = null;\n            }\n            this.handleDurationCheck();\n        });\n        __publicField(this, \"handlePause\", (e)=>{\n            this.isPlaying = false;\n            if (!this.isLoading) {\n                this.props.onPause(e);\n            }\n        });\n        __publicField(this, \"handleEnded\", ()=>{\n            const { activePlayer, loop, onEnded } = this.props;\n            if (activePlayer.loopOnEnded && loop) {\n                this.seekTo(0);\n            }\n            if (!loop) {\n                this.isPlaying = false;\n                onEnded();\n            }\n        });\n        __publicField(this, \"handleError\", (...args)=>{\n            this.isLoading = false;\n            this.props.onError(...args);\n        });\n        __publicField(this, \"handleDurationCheck\", ()=>{\n            clearTimeout(this.durationCheckTimeout);\n            const duration = this.getDuration();\n            if (duration) {\n                if (!this.onDurationCalled) {\n                    this.props.onDuration(duration);\n                    this.onDurationCalled = true;\n                }\n            } else {\n                this.durationCheckTimeout = setTimeout(this.handleDurationCheck, 100);\n            }\n        });\n        __publicField(this, \"handleLoaded\", ()=>{\n            this.isLoading = false;\n        });\n    }\n    componentDidMount() {\n        this.mounted = true;\n    }\n    componentWillUnmount() {\n        clearTimeout(this.progressTimeout);\n        clearTimeout(this.durationCheckTimeout);\n        if (this.isReady && this.props.stopOnUnmount) {\n            this.player.stop();\n            if (this.player.disablePIP) {\n                this.player.disablePIP();\n            }\n        }\n        this.mounted = false;\n    }\n    componentDidUpdate(prevProps) {\n        if (!this.player) {\n            return;\n        }\n        const { url, playing, volume, muted, playbackRate, pip, loop, activePlayer, disableDeferredLoading } = this.props;\n        if (!(0, import_react_fast_compare.default)(prevProps.url, url)) {\n            if (this.isLoading && !activePlayer.forceLoad && !disableDeferredLoading && !(0, import_utils.isMediaStream)(url)) {\n                console.warn(`ReactPlayer: the attempt to load ${url} is being deferred until the player has loaded`);\n                this.loadOnReady = url;\n                return;\n            }\n            this.isLoading = true;\n            this.startOnPlay = true;\n            this.onDurationCalled = false;\n            this.player.load(url, this.isReady);\n        }\n        if (!prevProps.playing && playing && !this.isPlaying) {\n            this.player.play();\n        }\n        if (prevProps.playing && !playing && this.isPlaying) {\n            this.player.pause();\n        }\n        if (!prevProps.pip && pip && this.player.enablePIP) {\n            this.player.enablePIP();\n        }\n        if (prevProps.pip && !pip && this.player.disablePIP) {\n            this.player.disablePIP();\n        }\n        if (prevProps.volume !== volume && volume !== null) {\n            this.player.setVolume(volume);\n        }\n        if (prevProps.muted !== muted) {\n            if (muted) {\n                this.player.mute();\n            } else {\n                this.player.unmute();\n                if (volume !== null) {\n                    setTimeout(()=>this.player.setVolume(volume));\n                }\n            }\n        }\n        if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {\n            this.player.setPlaybackRate(playbackRate);\n        }\n        if (prevProps.loop !== loop && this.player.setLoop) {\n            this.player.setLoop(loop);\n        }\n    }\n    getDuration() {\n        if (!this.isReady) return null;\n        return this.player.getDuration();\n    }\n    getCurrentTime() {\n        if (!this.isReady) return null;\n        return this.player.getCurrentTime();\n    }\n    getSecondsLoaded() {\n        if (!this.isReady) return null;\n        return this.player.getSecondsLoaded();\n    }\n    seekTo(amount, type, keepPlaying) {\n        if (!this.isReady) {\n            if (amount !== 0) {\n                this.seekOnPlay = amount;\n                setTimeout(()=>{\n                    this.seekOnPlay = null;\n                }, SEEK_ON_PLAY_EXPIRY);\n            }\n            return;\n        }\n        const isFraction = !type ? amount > 0 && amount < 1 : type === \"fraction\";\n        if (isFraction) {\n            const duration = this.player.getDuration();\n            if (!duration) {\n                console.warn(\"ReactPlayer: could not seek using fraction –\\xa0duration not yet available\");\n                return;\n            }\n            this.player.seekTo(duration * amount, keepPlaying);\n            return;\n        }\n        this.player.seekTo(amount, keepPlaying);\n    }\n    render() {\n        const Player2 = this.props.activePlayer;\n        if (!Player2) {\n            return null;\n        }\n        return /* @__PURE__ */ import_react.default.createElement(Player2, {\n            ...this.props,\n            onMount: this.handlePlayerMount,\n            onReady: this.handleReady,\n            onPlay: this.handlePlay,\n            onPause: this.handlePause,\n            onEnded: this.handleEnded,\n            onLoaded: this.handleLoaded,\n            onError: this.handleError\n        });\n    }\n}\n__publicField(Player, \"displayName\", \"Player\");\n__publicField(Player, \"propTypes\", import_props.propTypes);\n__publicField(Player, \"defaultProps\", import_props.defaultProps);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/Player.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/Preview.js":
/*!**************************************************!*\
  !*** ./node_modules/react-player/lib/Preview.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Preview_exports = {};\n__export(Preview_exports, {\n    default: ()=>Preview\n});\nmodule.exports = __toCommonJS(Preview_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst ICON_SIZE = \"64px\";\nconst cache = {};\nclass Preview extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"mounted\", false);\n        __publicField(this, \"state\", {\n            image: null\n        });\n        __publicField(this, \"handleKeyPress\", (e)=>{\n            if (e.key === \"Enter\" || e.key === \" \") {\n                this.props.onClick();\n            }\n        });\n    }\n    componentDidMount() {\n        this.mounted = true;\n        this.fetchImage(this.props);\n    }\n    componentDidUpdate(prevProps) {\n        const { url, light } = this.props;\n        if (prevProps.url !== url || prevProps.light !== light) {\n            this.fetchImage(this.props);\n        }\n    }\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n    fetchImage({ url, light, oEmbedUrl }) {\n        if (import_react.default.isValidElement(light)) {\n            return;\n        }\n        if (typeof light === \"string\") {\n            this.setState({\n                image: light\n            });\n            return;\n        }\n        if (cache[url]) {\n            this.setState({\n                image: cache[url]\n            });\n            return;\n        }\n        this.setState({\n            image: null\n        });\n        return window.fetch(oEmbedUrl.replace(\"{url}\", url)).then((response)=>response.json()).then((data)=>{\n            if (data.thumbnail_url && this.mounted) {\n                const image = data.thumbnail_url.replace(\"height=100\", \"height=480\").replace(\"-d_295x166\", \"-d_640\");\n                this.setState({\n                    image\n                });\n                cache[url] = image;\n            }\n        });\n    }\n    render() {\n        const { light, onClick, playIcon, previewTabIndex } = this.props;\n        const { image } = this.state;\n        const isElement = import_react.default.isValidElement(light);\n        const flexCenter = {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        };\n        const styles = {\n            preview: {\n                width: \"100%\",\n                height: \"100%\",\n                backgroundImage: image && !isElement ? `url(${image})` : void 0,\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center\",\n                cursor: \"pointer\",\n                ...flexCenter\n            },\n            shadow: {\n                background: \"radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)\",\n                borderRadius: ICON_SIZE,\n                width: ICON_SIZE,\n                height: ICON_SIZE,\n                position: isElement ? \"absolute\" : void 0,\n                ...flexCenter\n            },\n            playIcon: {\n                borderStyle: \"solid\",\n                borderWidth: \"16px 0 16px 26px\",\n                borderColor: \"transparent transparent transparent white\",\n                marginLeft: \"7px\"\n            }\n        };\n        const defaultPlayIcon = /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style: styles.shadow,\n            className: \"react-player__shadow\"\n        }, /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style: styles.playIcon,\n            className: \"react-player__play-icon\"\n        }));\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style: styles.preview,\n            className: \"react-player__preview\",\n            onClick,\n            tabIndex: previewTabIndex,\n            onKeyPress: this.handleKeyPress\n        }, isElement ? light : null, playIcon || defaultPlayIcon);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/Preview.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/ReactPlayer.js":
/*!******************************************************!*\
  !*** ./node_modules/react-player/lib/ReactPlayer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar ReactPlayer_exports = {};\n__export(ReactPlayer_exports, {\n    createReactPlayer: ()=>createReactPlayer\n});\nmodule.exports = __toCommonJS(ReactPlayer_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_deepmerge = __toESM(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\"));\nvar import_memoize_one = __toESM(__webpack_require__(/*! memoize-one */ \"(ssr)/./node_modules/memoize-one/dist/memoize-one.esm.js\"));\nvar import_react_fast_compare = __toESM(__webpack_require__(/*! react-fast-compare */ \"(ssr)/./node_modules/react-fast-compare/index.js\"));\nvar import_props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nvar import_utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_Player = __toESM(__webpack_require__(/*! ./Player */ \"(ssr)/./node_modules/react-player/lib/Player.js\"));\nconst Preview = (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerPreview */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Preview */ \"(ssr)/./node_modules/react-player/lib/Preview.js\", 23)));\nconst IS_BROWSER =  false && 0;\nconst IS_GLOBAL = typeof global !== \"undefined\" && global.window && global.window.document;\nconst SUPPORTED_PROPS = Object.keys(import_props.propTypes);\nconst UniversalSuspense = IS_BROWSER || IS_GLOBAL ? import_react.Suspense : ()=>null;\nconst customPlayers = [];\nconst createReactPlayer = (players, fallback)=>{\n    var _a;\n    return _a = class extends import_react.Component {\n        constructor(){\n            super(...arguments);\n            __publicField(this, \"state\", {\n                showPreview: !!this.props.light\n            });\n            // Use references, as refs is used by React\n            __publicField(this, \"references\", {\n                wrapper: (wrapper)=>{\n                    this.wrapper = wrapper;\n                },\n                player: (player)=>{\n                    this.player = player;\n                }\n            });\n            __publicField(this, \"handleClickPreview\", (e)=>{\n                this.setState({\n                    showPreview: false\n                });\n                this.props.onClickPreview(e);\n            });\n            __publicField(this, \"showPreview\", ()=>{\n                this.setState({\n                    showPreview: true\n                });\n            });\n            __publicField(this, \"getDuration\", ()=>{\n                if (!this.player) return null;\n                return this.player.getDuration();\n            });\n            __publicField(this, \"getCurrentTime\", ()=>{\n                if (!this.player) return null;\n                return this.player.getCurrentTime();\n            });\n            __publicField(this, \"getSecondsLoaded\", ()=>{\n                if (!this.player) return null;\n                return this.player.getSecondsLoaded();\n            });\n            __publicField(this, \"getInternalPlayer\", (key = \"player\")=>{\n                if (!this.player) return null;\n                return this.player.getInternalPlayer(key);\n            });\n            __publicField(this, \"seekTo\", (fraction, type, keepPlaying)=>{\n                if (!this.player) return null;\n                this.player.seekTo(fraction, type, keepPlaying);\n            });\n            __publicField(this, \"handleReady\", ()=>{\n                this.props.onReady(this);\n            });\n            __publicField(this, \"getActivePlayer\", (0, import_memoize_one.default)((url)=>{\n                for (const player of [\n                    ...customPlayers,\n                    ...players\n                ]){\n                    if (player.canPlay(url)) {\n                        return player;\n                    }\n                }\n                if (fallback) {\n                    return fallback;\n                }\n                return null;\n            }));\n            __publicField(this, \"getConfig\", (0, import_memoize_one.default)((url, key)=>{\n                const { config } = this.props;\n                return import_deepmerge.default.all([\n                    import_props.defaultProps.config,\n                    import_props.defaultProps.config[key] || {},\n                    config,\n                    config[key] || {}\n                ]);\n            }));\n            __publicField(this, \"getAttributes\", (0, import_memoize_one.default)((url)=>{\n                return (0, import_utils.omit)(this.props, SUPPORTED_PROPS);\n            }));\n            __publicField(this, \"renderActivePlayer\", (url)=>{\n                if (!url) return null;\n                const player = this.getActivePlayer(url);\n                if (!player) return null;\n                const config = this.getConfig(url, player.key);\n                return /* @__PURE__ */ import_react.default.createElement(import_Player.default, {\n                    ...this.props,\n                    key: player.key,\n                    ref: this.references.player,\n                    config,\n                    activePlayer: player.lazyPlayer || player,\n                    onReady: this.handleReady\n                });\n            });\n        }\n        shouldComponentUpdate(nextProps, nextState) {\n            return !(0, import_react_fast_compare.default)(this.props, nextProps) || !(0, import_react_fast_compare.default)(this.state, nextState);\n        }\n        componentDidUpdate(prevProps) {\n            const { light } = this.props;\n            if (!prevProps.light && light) {\n                this.setState({\n                    showPreview: true\n                });\n            }\n            if (prevProps.light && !light) {\n                this.setState({\n                    showPreview: false\n                });\n            }\n        }\n        renderPreview(url) {\n            if (!url) return null;\n            const { light, playIcon, previewTabIndex, oEmbedUrl } = this.props;\n            return /* @__PURE__ */ import_react.default.createElement(Preview, {\n                url,\n                light,\n                playIcon,\n                previewTabIndex,\n                oEmbedUrl,\n                onClick: this.handleClickPreview\n            });\n        }\n        render() {\n            const { url, style, width, height, fallback: fallback2, wrapper: Wrapper } = this.props;\n            const { showPreview } = this.state;\n            const attributes = this.getAttributes(url);\n            const wrapperRef = typeof Wrapper === \"string\" ? this.references.wrapper : void 0;\n            return /* @__PURE__ */ import_react.default.createElement(Wrapper, {\n                ref: wrapperRef,\n                style: {\n                    ...style,\n                    width,\n                    height\n                },\n                ...attributes\n            }, /* @__PURE__ */ import_react.default.createElement(UniversalSuspense, {\n                fallback: fallback2\n            }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));\n        }\n    }, __publicField(_a, \"displayName\", \"ReactPlayer\"), __publicField(_a, \"propTypes\", import_props.propTypes), __publicField(_a, \"defaultProps\", import_props.defaultProps), __publicField(_a, \"addCustomPlayer\", (player)=>{\n        customPlayers.push(player);\n    }), __publicField(_a, \"removeCustomPlayers\", ()=>{\n        customPlayers.length = 0;\n    }), __publicField(_a, \"canPlay\", (url)=>{\n        for (const Player2 of [\n            ...customPlayers,\n            ...players\n        ]){\n            if (Player2.canPlay(url)) {\n                return true;\n            }\n        }\n        return false;\n    }), __publicField(_a, \"canEnablePIP\", (url)=>{\n        for (const Player2 of [\n            ...customPlayers,\n            ...players\n        ]){\n            if (Player2.canEnablePIP && Player2.canEnablePIP(url)) {\n                return true;\n            }\n        }\n        return false;\n    }), _a;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/ReactPlayer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar src_exports = {};\n__export(src_exports, {\n    default: ()=>src_default\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_players = __toESM(__webpack_require__(/*! ./players */ \"(ssr)/./node_modules/react-player/lib/players/index.js\"));\nvar import_ReactPlayer = __webpack_require__(/*! ./ReactPlayer */ \"(ssr)/./node_modules/react-player/lib/ReactPlayer.js\");\nconst fallback = import_players.default[import_players.default.length - 1];\nvar src_default = (0, import_ReactPlayer.createReactPlayer)(import_players.default, fallback);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsV0FBV0MsT0FBT0MsTUFBTTtBQUM1QixJQUFJQyxZQUFZRixPQUFPRyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkosT0FBT0ssd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQk4sT0FBT08sbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVSLE9BQU9TLGNBQWM7QUFDeEMsSUFBSUMsZUFBZVYsT0FBT1csU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFdBQVcsQ0FBQ0MsUUFBUUM7SUFDdEIsSUFBSyxJQUFJQyxRQUFRRCxJQUNmYixVQUFVWSxRQUFRRSxNQUFNO1FBQUVDLEtBQUtGLEdBQUcsQ0FBQ0MsS0FBSztRQUFFRSxZQUFZO0lBQUs7QUFDL0Q7QUFDQSxJQUFJQyxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlHLE9BQU9sQixrQkFBa0JlLE1BQ2hDLElBQUksQ0FBQ1gsYUFBYWUsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3BCLFVBQVVrQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT25CLGlCQUFpQmlCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLFVBQVUsQ0FBQ0MsS0FBS0MsWUFBWWQsU0FBWUEsQ0FBQUEsU0FBU2EsT0FBTyxPQUFPNUIsU0FBU1MsYUFBYW1CLFFBQVEsQ0FBQyxHQUFHUixZQUNuRyxzRUFBc0U7SUFDdEUsaUVBQWlFO0lBQ2pFLHNFQUFzRTtJQUN0RSxxRUFBcUU7SUFDckVTLGNBQWMsQ0FBQ0QsT0FBTyxDQUFDQSxJQUFJRSxVQUFVLEdBQUczQixVQUFVWSxRQUFRLFdBQVc7UUFBRWdCLE9BQU9IO1FBQUtULFlBQVk7SUFBSyxLQUFLSixRQUN6R2EsSUFDRjtBQUNBLElBQUlJLGVBQWUsQ0FBQ0osTUFBUVIsWUFBWWpCLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRTRCLE9BQU87SUFBSyxJQUFJSDtBQUN0RixJQUFJSyxjQUFjLENBQUM7QUFDbkJuQixTQUFTbUIsYUFBYTtJQUNwQkMsU0FBUyxJQUFNQztBQUNqQjtBQUNBQyxPQUFPQyxPQUFPLEdBQUdMLGFBQWFDO0FBQzlCLElBQUlLLGlCQUFpQlgsUUFBUVksbUJBQU9BLENBQUMseUVBQVc7QUFDaEQsSUFBSUMscUJBQXFCRCxtQkFBT0EsQ0FBQywyRUFBZTtBQUNoRCxNQUFNRSxXQUFXSCxlQUFlSixPQUFPLENBQUNJLGVBQWVKLE9BQU8sQ0FBQ1EsTUFBTSxHQUFHLEVBQUU7QUFDMUUsSUFBSVAsY0FBYyxDQUFDLEdBQUdLLG1CQUFtQkcsaUJBQWlCLEVBQUVMLGVBQWVKLE9BQU8sRUFBRU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWxlYm90X2Zvcl9jaHJpc3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9pbmRleC5qcz8xYjljIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGRlZmF1bHQ6ICgpID0+IHNyY19kZWZhdWx0XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcbnZhciBpbXBvcnRfcGxheWVycyA9IF9fdG9FU00ocmVxdWlyZShcIi4vcGxheWVyc1wiKSk7XG52YXIgaW1wb3J0X1JlYWN0UGxheWVyID0gcmVxdWlyZShcIi4vUmVhY3RQbGF5ZXJcIik7XG5jb25zdCBmYWxsYmFjayA9IGltcG9ydF9wbGF5ZXJzLmRlZmF1bHRbaW1wb3J0X3BsYXllcnMuZGVmYXVsdC5sZW5ndGggLSAxXTtcbnZhciBzcmNfZGVmYXVsdCA9ICgwLCBpbXBvcnRfUmVhY3RQbGF5ZXIuY3JlYXRlUmVhY3RQbGF5ZXIpKGltcG9ydF9wbGF5ZXJzLmRlZmF1bHQsIGZhbGxiYWNrKTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZSIsIk9iamVjdCIsImNyZWF0ZSIsIl9fZGVmUHJvcCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9fZ2V0UHJvdG9PZiIsImdldFByb3RvdHlwZU9mIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9FU00iLCJtb2QiLCJpc05vZGVNb2RlIiwiX19lc01vZHVsZSIsInZhbHVlIiwiX190b0NvbW1vbkpTIiwic3JjX2V4cG9ydHMiLCJkZWZhdWx0Iiwic3JjX2RlZmF1bHQiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1wb3J0X3BsYXllcnMiLCJyZXF1aXJlIiwiaW1wb3J0X1JlYWN0UGxheWVyIiwiZmFsbGJhY2siLCJsZW5ndGgiLCJjcmVhdGVSZWFjdFBsYXllciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/patterns.js":
/*!***************************************************!*\
  !*** ./node_modules/react-player/lib/patterns.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar patterns_exports = {};\n__export(patterns_exports, {\n    AUDIO_EXTENSIONS: ()=>AUDIO_EXTENSIONS,\n    DASH_EXTENSIONS: ()=>DASH_EXTENSIONS,\n    FLV_EXTENSIONS: ()=>FLV_EXTENSIONS,\n    HLS_EXTENSIONS: ()=>HLS_EXTENSIONS,\n    MATCH_URL_DAILYMOTION: ()=>MATCH_URL_DAILYMOTION,\n    MATCH_URL_FACEBOOK: ()=>MATCH_URL_FACEBOOK,\n    MATCH_URL_FACEBOOK_WATCH: ()=>MATCH_URL_FACEBOOK_WATCH,\n    MATCH_URL_KALTURA: ()=>MATCH_URL_KALTURA,\n    MATCH_URL_MIXCLOUD: ()=>MATCH_URL_MIXCLOUD,\n    MATCH_URL_SOUNDCLOUD: ()=>MATCH_URL_SOUNDCLOUD,\n    MATCH_URL_STREAMABLE: ()=>MATCH_URL_STREAMABLE,\n    MATCH_URL_TWITCH_CHANNEL: ()=>MATCH_URL_TWITCH_CHANNEL,\n    MATCH_URL_TWITCH_VIDEO: ()=>MATCH_URL_TWITCH_VIDEO,\n    MATCH_URL_VIDYARD: ()=>MATCH_URL_VIDYARD,\n    MATCH_URL_VIMEO: ()=>MATCH_URL_VIMEO,\n    MATCH_URL_WISTIA: ()=>MATCH_URL_WISTIA,\n    MATCH_URL_YOUTUBE: ()=>MATCH_URL_YOUTUBE,\n    VIDEO_EXTENSIONS: ()=>VIDEO_EXTENSIONS,\n    canPlay: ()=>canPlay\n});\nmodule.exports = __toCommonJS(patterns_exports);\nvar import_utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nconst MATCH_URL_YOUTUBE = /(?:youtu\\.be\\/|youtube(?:-nocookie|education)?\\.com\\/(?:embed\\/|v\\/|watch\\/|watch\\?v=|watch\\?.+&v=|shorts\\/|live\\/))((\\w|-){11})|youtube\\.com\\/playlist\\?list=|youtube\\.com\\/user\\//;\nconst MATCH_URL_SOUNDCLOUD = /(?:soundcloud\\.com|snd\\.sc)\\/[^.]+$/;\nconst MATCH_URL_VIMEO = /vimeo\\.com\\/(?!progressive_redirect).+/;\nconst MATCH_URL_FACEBOOK = /^https?:\\/\\/(www\\.)?facebook\\.com.*\\/(video(s)?|watch|story)(\\.php?|\\/).+$/;\nconst MATCH_URL_FACEBOOK_WATCH = /^https?:\\/\\/fb\\.watch\\/.+$/;\nconst MATCH_URL_STREAMABLE = /streamable\\.com\\/([a-z0-9]+)$/;\nconst MATCH_URL_WISTIA = /(?:wistia\\.(?:com|net)|wi\\.st)\\/(?:medias|embed)\\/(?:iframe\\/)?([^?]+)/;\nconst MATCH_URL_TWITCH_VIDEO = /(?:www\\.|go\\.)?twitch\\.tv\\/videos\\/(\\d+)($|\\?)/;\nconst MATCH_URL_TWITCH_CHANNEL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-zA-Z0-9_]+)($|\\?)/;\nconst MATCH_URL_DAILYMOTION = /^(?:(?:https?):)?(?:\\/\\/)?(?:www\\.)?(?:(?:dailymotion\\.com(?:\\/embed)?\\/video)|dai\\.ly)\\/([a-zA-Z0-9]+)(?:_[\\w_-]+)?(?:[\\w.#_-]+)?/;\nconst MATCH_URL_MIXCLOUD = /mixcloud\\.com\\/([^/]+\\/[^/]+)/;\nconst MATCH_URL_VIDYARD = /vidyard.com\\/(?:watch\\/)?([a-zA-Z0-9-_]+)/;\nconst MATCH_URL_KALTURA = /^https?:\\/\\/[a-zA-Z]+\\.kaltura.(com|org)\\/p\\/([0-9]+)\\/sp\\/([0-9]+)00\\/embedIframeJs\\/uiconf_id\\/([0-9]+)\\/partner_id\\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_].*)$/;\nconst AUDIO_EXTENSIONS = /\\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\\?)/i;\nconst VIDEO_EXTENSIONS = /\\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\\d+]+)?($|\\?)/i;\nconst HLS_EXTENSIONS = /\\.(m3u8)($|\\?)/i;\nconst DASH_EXTENSIONS = /\\.(mpd)($|\\?)/i;\nconst FLV_EXTENSIONS = /\\.(flv)($|\\?)/i;\nconst canPlayFile = (url)=>{\n    if (url instanceof Array) {\n        for (const item of url){\n            if (typeof item === \"string\" && canPlayFile(item)) {\n                return true;\n            }\n            if (canPlayFile(item.src)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if ((0, import_utils.isMediaStream)(url) || (0, import_utils.isBlobUrl)(url)) {\n        return true;\n    }\n    return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url) || FLV_EXTENSIONS.test(url);\n};\nconst canPlay = {\n    youtube: (url)=>{\n        if (url instanceof Array) {\n            return url.every((item)=>MATCH_URL_YOUTUBE.test(item));\n        }\n        return MATCH_URL_YOUTUBE.test(url);\n    },\n    soundcloud: (url)=>MATCH_URL_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url),\n    vimeo: (url)=>MATCH_URL_VIMEO.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url),\n    facebook: (url)=>MATCH_URL_FACEBOOK.test(url) || MATCH_URL_FACEBOOK_WATCH.test(url),\n    streamable: (url)=>MATCH_URL_STREAMABLE.test(url),\n    wistia: (url)=>MATCH_URL_WISTIA.test(url),\n    twitch: (url)=>MATCH_URL_TWITCH_VIDEO.test(url) || MATCH_URL_TWITCH_CHANNEL.test(url),\n    dailymotion: (url)=>MATCH_URL_DAILYMOTION.test(url),\n    mixcloud: (url)=>MATCH_URL_MIXCLOUD.test(url),\n    vidyard: (url)=>MATCH_URL_VIDYARD.test(url),\n    kaltura: (url)=>MATCH_URL_KALTURA.test(url),\n    file: canPlayFile\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wYXR0ZXJucy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJGLE9BQU9HLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JKLE9BQU9LLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlTixPQUFPTyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsV0FBVyxDQUFDQyxRQUFRQztJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZaLFVBQVVXLFFBQVFFLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT2hCLGtCQUFrQmEsTUFDaEMsSUFBSSxDQUFDWCxhQUFhZSxJQUFJLENBQUNMLElBQUlJLFFBQVFBLFFBQVFGLFFBQ3pDbkIsVUFBVWlCLElBQUlJLEtBQUs7WUFBRVAsS0FBSyxJQUFNSSxJQUFJLENBQUNHLElBQUk7WUFBRU4sWUFBWSxDQUFFSyxDQUFBQSxPQUFPakIsaUJBQWlCZSxNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxlQUFlLENBQUNDLE1BQVFSLFlBQVloQixVQUFVLENBQUMsR0FBRyxjQUFjO1FBQUV5QixPQUFPO0lBQUssSUFBSUQ7QUFDdEYsSUFBSUUsbUJBQW1CLENBQUM7QUFDeEJoQixTQUFTZ0Isa0JBQWtCO0lBQ3pCQyxrQkFBa0IsSUFBTUE7SUFDeEJDLGlCQUFpQixJQUFNQTtJQUN2QkMsZ0JBQWdCLElBQU1BO0lBQ3RCQyxnQkFBZ0IsSUFBTUE7SUFDdEJDLHVCQUF1QixJQUFNQTtJQUM3QkMsb0JBQW9CLElBQU1BO0lBQzFCQywwQkFBMEIsSUFBTUE7SUFDaENDLG1CQUFtQixJQUFNQTtJQUN6QkMsb0JBQW9CLElBQU1BO0lBQzFCQyxzQkFBc0IsSUFBTUE7SUFDNUJDLHNCQUFzQixJQUFNQTtJQUM1QkMsMEJBQTBCLElBQU1BO0lBQ2hDQyx3QkFBd0IsSUFBTUE7SUFDOUJDLG1CQUFtQixJQUFNQTtJQUN6QkMsaUJBQWlCLElBQU1BO0lBQ3ZCQyxrQkFBa0IsSUFBTUE7SUFDeEJDLG1CQUFtQixJQUFNQTtJQUN6QkMsa0JBQWtCLElBQU1BO0lBQ3hCQyxTQUFTLElBQU1BO0FBQ2pCO0FBQ0FDLE9BQU9DLE9BQU8sR0FBR3hCLGFBQWFHO0FBQzlCLElBQUlzQixlQUFlQyxtQkFBT0EsQ0FBQywrREFBUztBQUNwQyxNQUFNTixvQkFBb0I7QUFDMUIsTUFBTVAsdUJBQXVCO0FBQzdCLE1BQU1LLGtCQUFrQjtBQUN4QixNQUFNVCxxQkFBcUI7QUFDM0IsTUFBTUMsMkJBQTJCO0FBQ2pDLE1BQU1JLHVCQUF1QjtBQUM3QixNQUFNSyxtQkFBbUI7QUFDekIsTUFBTUgseUJBQXlCO0FBQy9CLE1BQU1ELDJCQUEyQjtBQUNqQyxNQUFNUCx3QkFBd0I7QUFDOUIsTUFBTUkscUJBQXFCO0FBQzNCLE1BQU1LLG9CQUFvQjtBQUMxQixNQUFNTixvQkFBb0I7QUFDMUIsTUFBTVAsbUJBQW1CO0FBQ3pCLE1BQU1pQixtQkFBbUI7QUFDekIsTUFBTWQsaUJBQWlCO0FBQ3ZCLE1BQU1GLGtCQUFrQjtBQUN4QixNQUFNQyxpQkFBaUI7QUFDdkIsTUFBTXFCLGNBQWMsQ0FBQ0M7SUFDbkIsSUFBSUEsZUFBZUMsT0FBTztRQUN4QixLQUFLLE1BQU1DLFFBQVFGLElBQUs7WUFDdEIsSUFBSSxPQUFPRSxTQUFTLFlBQVlILFlBQVlHLE9BQU87Z0JBQ2pELE9BQU87WUFDVDtZQUNBLElBQUlILFlBQVlHLEtBQUtDLEdBQUcsR0FBRztnQkFDekIsT0FBTztZQUNUO1FBQ0Y7UUFDQSxPQUFPO0lBQ1Q7SUFDQSxJQUFJLENBQUMsR0FBR04sYUFBYU8sYUFBYSxFQUFFSixRQUFRLENBQUMsR0FBR0gsYUFBYVEsU0FBUyxFQUFFTCxNQUFNO1FBQzVFLE9BQU87SUFDVDtJQUNBLE9BQU94QixpQkFBaUI4QixJQUFJLENBQUNOLFFBQVFQLGlCQUFpQmEsSUFBSSxDQUFDTixRQUFRckIsZUFBZTJCLElBQUksQ0FBQ04sUUFBUXZCLGdCQUFnQjZCLElBQUksQ0FBQ04sUUFBUXRCLGVBQWU0QixJQUFJLENBQUNOO0FBQ2xKO0FBQ0EsTUFBTU4sVUFBVTtJQUNkYSxTQUFTLENBQUNQO1FBQ1IsSUFBSUEsZUFBZUMsT0FBTztZQUN4QixPQUFPRCxJQUFJUSxLQUFLLENBQUMsQ0FBQ04sT0FBU1Ysa0JBQWtCYyxJQUFJLENBQUNKO1FBQ3BEO1FBQ0EsT0FBT1Ysa0JBQWtCYyxJQUFJLENBQUNOO0lBQ2hDO0lBQ0FTLFlBQVksQ0FBQ1QsTUFBUWYscUJBQXFCcUIsSUFBSSxDQUFDTixRQUFRLENBQUN4QixpQkFBaUI4QixJQUFJLENBQUNOO0lBQzlFVSxPQUFPLENBQUNWLE1BQVFWLGdCQUFnQmdCLElBQUksQ0FBQ04sUUFBUSxDQUFDUCxpQkFBaUJhLElBQUksQ0FBQ04sUUFBUSxDQUFDckIsZUFBZTJCLElBQUksQ0FBQ047SUFDakdXLFVBQVUsQ0FBQ1gsTUFBUW5CLG1CQUFtQnlCLElBQUksQ0FBQ04sUUFBUWxCLHlCQUF5QndCLElBQUksQ0FBQ047SUFDakZZLFlBQVksQ0FBQ1osTUFBUWQscUJBQXFCb0IsSUFBSSxDQUFDTjtJQUMvQ2EsUUFBUSxDQUFDYixNQUFRVCxpQkFBaUJlLElBQUksQ0FBQ047SUFDdkNjLFFBQVEsQ0FBQ2QsTUFBUVosdUJBQXVCa0IsSUFBSSxDQUFDTixRQUFRYix5QkFBeUJtQixJQUFJLENBQUNOO0lBQ25GZSxhQUFhLENBQUNmLE1BQVFwQixzQkFBc0IwQixJQUFJLENBQUNOO0lBQ2pEZ0IsVUFBVSxDQUFDaEIsTUFBUWhCLG1CQUFtQnNCLElBQUksQ0FBQ047SUFDM0NpQixTQUFTLENBQUNqQixNQUFRWCxrQkFBa0JpQixJQUFJLENBQUNOO0lBQ3pDa0IsU0FBUyxDQUFDbEIsTUFBUWpCLGtCQUFrQnVCLElBQUksQ0FBQ047SUFDekNtQixNQUFNcEI7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbGVib3RfZm9yX2NocmlzdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BhdHRlcm5zLmpzPzgyOTEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBwYXR0ZXJuc19leHBvcnRzID0ge307XG5fX2V4cG9ydChwYXR0ZXJuc19leHBvcnRzLCB7XG4gIEFVRElPX0VYVEVOU0lPTlM6ICgpID0+IEFVRElPX0VYVEVOU0lPTlMsXG4gIERBU0hfRVhURU5TSU9OUzogKCkgPT4gREFTSF9FWFRFTlNJT05TLFxuICBGTFZfRVhURU5TSU9OUzogKCkgPT4gRkxWX0VYVEVOU0lPTlMsXG4gIEhMU19FWFRFTlNJT05TOiAoKSA9PiBITFNfRVhURU5TSU9OUyxcbiAgTUFUQ0hfVVJMX0RBSUxZTU9USU9OOiAoKSA9PiBNQVRDSF9VUkxfREFJTFlNT1RJT04sXG4gIE1BVENIX1VSTF9GQUNFQk9PSzogKCkgPT4gTUFUQ0hfVVJMX0ZBQ0VCT09LLFxuICBNQVRDSF9VUkxfRkFDRUJPT0tfV0FUQ0g6ICgpID0+IE1BVENIX1VSTF9GQUNFQk9PS19XQVRDSCxcbiAgTUFUQ0hfVVJMX0tBTFRVUkE6ICgpID0+IE1BVENIX1VSTF9LQUxUVVJBLFxuICBNQVRDSF9VUkxfTUlYQ0xPVUQ6ICgpID0+IE1BVENIX1VSTF9NSVhDTE9VRCxcbiAgTUFUQ0hfVVJMX1NPVU5EQ0xPVUQ6ICgpID0+IE1BVENIX1VSTF9TT1VORENMT1VELFxuICBNQVRDSF9VUkxfU1RSRUFNQUJMRTogKCkgPT4gTUFUQ0hfVVJMX1NUUkVBTUFCTEUsXG4gIE1BVENIX1VSTF9UV0lUQ0hfQ0hBTk5FTDogKCkgPT4gTUFUQ0hfVVJMX1RXSVRDSF9DSEFOTkVMLFxuICBNQVRDSF9VUkxfVFdJVENIX1ZJREVPOiAoKSA9PiBNQVRDSF9VUkxfVFdJVENIX1ZJREVPLFxuICBNQVRDSF9VUkxfVklEWUFSRDogKCkgPT4gTUFUQ0hfVVJMX1ZJRFlBUkQsXG4gIE1BVENIX1VSTF9WSU1FTzogKCkgPT4gTUFUQ0hfVVJMX1ZJTUVPLFxuICBNQVRDSF9VUkxfV0lTVElBOiAoKSA9PiBNQVRDSF9VUkxfV0lTVElBLFxuICBNQVRDSF9VUkxfWU9VVFVCRTogKCkgPT4gTUFUQ0hfVVJMX1lPVVRVQkUsXG4gIFZJREVPX0VYVEVOU0lPTlM6ICgpID0+IFZJREVPX0VYVEVOU0lPTlMsXG4gIGNhblBsYXk6ICgpID0+IGNhblBsYXlcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMocGF0dGVybnNfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBNQVRDSF9VUkxfWU9VVFVCRSA9IC8oPzp5b3V0dVxcLmJlXFwvfHlvdXR1YmUoPzotbm9jb29raWV8ZWR1Y2F0aW9uKT9cXC5jb21cXC8oPzplbWJlZFxcL3x2XFwvfHdhdGNoXFwvfHdhdGNoXFw/dj18d2F0Y2hcXD8uKyZ2PXxzaG9ydHNcXC98bGl2ZVxcLykpKChcXHd8LSl7MTF9KXx5b3V0dWJlXFwuY29tXFwvcGxheWxpc3RcXD9saXN0PXx5b3V0dWJlXFwuY29tXFwvdXNlclxcLy87XG5jb25zdCBNQVRDSF9VUkxfU09VTkRDTE9VRCA9IC8oPzpzb3VuZGNsb3VkXFwuY29tfHNuZFxcLnNjKVxcL1teLl0rJC87XG5jb25zdCBNQVRDSF9VUkxfVklNRU8gPSAvdmltZW9cXC5jb21cXC8oPyFwcm9ncmVzc2l2ZV9yZWRpcmVjdCkuKy87XG5jb25zdCBNQVRDSF9VUkxfRkFDRUJPT0sgPSAvXmh0dHBzPzpcXC9cXC8od3d3XFwuKT9mYWNlYm9va1xcLmNvbS4qXFwvKHZpZGVvKHMpP3x3YXRjaHxzdG9yeSkoXFwucGhwP3xcXC8pLiskLztcbmNvbnN0IE1BVENIX1VSTF9GQUNFQk9PS19XQVRDSCA9IC9eaHR0cHM/OlxcL1xcL2ZiXFwud2F0Y2hcXC8uKyQvO1xuY29uc3QgTUFUQ0hfVVJMX1NUUkVBTUFCTEUgPSAvc3RyZWFtYWJsZVxcLmNvbVxcLyhbYS16MC05XSspJC87XG5jb25zdCBNQVRDSF9VUkxfV0lTVElBID0gLyg/Ondpc3RpYVxcLig/OmNvbXxuZXQpfHdpXFwuc3QpXFwvKD86bWVkaWFzfGVtYmVkKVxcLyg/OmlmcmFtZVxcLyk/KFteP10rKS87XG5jb25zdCBNQVRDSF9VUkxfVFdJVENIX1ZJREVPID0gLyg/Ond3d1xcLnxnb1xcLik/dHdpdGNoXFwudHZcXC92aWRlb3NcXC8oXFxkKykoJHxcXD8pLztcbmNvbnN0IE1BVENIX1VSTF9UV0lUQ0hfQ0hBTk5FTCA9IC8oPzp3d3dcXC58Z29cXC4pP3R3aXRjaFxcLnR2XFwvKFthLXpBLVowLTlfXSspKCR8XFw/KS87XG5jb25zdCBNQVRDSF9VUkxfREFJTFlNT1RJT04gPSAvXig/Oig/Omh0dHBzPyk6KT8oPzpcXC9cXC8pPyg/Ond3d1xcLik/KD86KD86ZGFpbHltb3Rpb25cXC5jb20oPzpcXC9lbWJlZCk/XFwvdmlkZW8pfGRhaVxcLmx5KVxcLyhbYS16QS1aMC05XSspKD86X1tcXHdfLV0rKT8oPzpbXFx3LiNfLV0rKT8vO1xuY29uc3QgTUFUQ0hfVVJMX01JWENMT1VEID0gL21peGNsb3VkXFwuY29tXFwvKFteL10rXFwvW14vXSspLztcbmNvbnN0IE1BVENIX1VSTF9WSURZQVJEID0gL3ZpZHlhcmQuY29tXFwvKD86d2F0Y2hcXC8pPyhbYS16QS1aMC05LV9dKykvO1xuY29uc3QgTUFUQ0hfVVJMX0tBTFRVUkEgPSAvXmh0dHBzPzpcXC9cXC9bYS16QS1aXStcXC5rYWx0dXJhLihjb218b3JnKVxcL3BcXC8oWzAtOV0rKVxcL3NwXFwvKFswLTldKykwMFxcL2VtYmVkSWZyYW1lSnNcXC91aWNvbmZfaWRcXC8oWzAtOV0rKVxcL3BhcnRuZXJfaWRcXC8oWzAtOV0rKSguKillbnRyeV9pZC4oW2EtekEtWjAtOS1fXS4qKSQvO1xuY29uc3QgQVVESU9fRVhURU5TSU9OUyA9IC9cXC4obTRhfG00YnxtcDRhfG1wZ2F8bXAyfG1wMmF8bXAzfG0yYXxtM2F8d2F2fHdlYmF8YWFjfG9nYXxzcHgpKCR8XFw/KS9pO1xuY29uc3QgVklERU9fRVhURU5TSU9OUyA9IC9cXC4obXA0fG9nW2d2XXx3ZWJtfG1vdnxtNHYpKCN0PVssXFxkK10rKT8oJHxcXD8pL2k7XG5jb25zdCBITFNfRVhURU5TSU9OUyA9IC9cXC4obTN1OCkoJHxcXD8pL2k7XG5jb25zdCBEQVNIX0VYVEVOU0lPTlMgPSAvXFwuKG1wZCkoJHxcXD8pL2k7XG5jb25zdCBGTFZfRVhURU5TSU9OUyA9IC9cXC4oZmx2KSgkfFxcPykvaTtcbmNvbnN0IGNhblBsYXlGaWxlID0gKHVybCkgPT4ge1xuICBpZiAodXJsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdXJsKSB7XG4gICAgICBpZiAodHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIgJiYgY2FuUGxheUZpbGUoaXRlbSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoY2FuUGxheUZpbGUoaXRlbS5zcmMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCgwLCBpbXBvcnRfdXRpbHMuaXNNZWRpYVN0cmVhbSkodXJsKSB8fCAoMCwgaW1wb3J0X3V0aWxzLmlzQmxvYlVybCkodXJsKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBBVURJT19FWFRFTlNJT05TLnRlc3QodXJsKSB8fCBWSURFT19FWFRFTlNJT05TLnRlc3QodXJsKSB8fCBITFNfRVhURU5TSU9OUy50ZXN0KHVybCkgfHwgREFTSF9FWFRFTlNJT05TLnRlc3QodXJsKSB8fCBGTFZfRVhURU5TSU9OUy50ZXN0KHVybCk7XG59O1xuY29uc3QgY2FuUGxheSA9IHtcbiAgeW91dHViZTogKHVybCkgPT4ge1xuICAgIGlmICh1cmwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgcmV0dXJuIHVybC5ldmVyeSgoaXRlbSkgPT4gTUFUQ0hfVVJMX1lPVVRVQkUudGVzdChpdGVtKSk7XG4gICAgfVxuICAgIHJldHVybiBNQVRDSF9VUkxfWU9VVFVCRS50ZXN0KHVybCk7XG4gIH0sXG4gIHNvdW5kY2xvdWQ6ICh1cmwpID0+IE1BVENIX1VSTF9TT1VORENMT1VELnRlc3QodXJsKSAmJiAhQVVESU9fRVhURU5TSU9OUy50ZXN0KHVybCksXG4gIHZpbWVvOiAodXJsKSA9PiBNQVRDSF9VUkxfVklNRU8udGVzdCh1cmwpICYmICFWSURFT19FWFRFTlNJT05TLnRlc3QodXJsKSAmJiAhSExTX0VYVEVOU0lPTlMudGVzdCh1cmwpLFxuICBmYWNlYm9vazogKHVybCkgPT4gTUFUQ0hfVVJMX0ZBQ0VCT09LLnRlc3QodXJsKSB8fCBNQVRDSF9VUkxfRkFDRUJPT0tfV0FUQ0gudGVzdCh1cmwpLFxuICBzdHJlYW1hYmxlOiAodXJsKSA9PiBNQVRDSF9VUkxfU1RSRUFNQUJMRS50ZXN0KHVybCksXG4gIHdpc3RpYTogKHVybCkgPT4gTUFUQ0hfVVJMX1dJU1RJQS50ZXN0KHVybCksXG4gIHR3aXRjaDogKHVybCkgPT4gTUFUQ0hfVVJMX1RXSVRDSF9WSURFTy50ZXN0KHVybCkgfHwgTUFUQ0hfVVJMX1RXSVRDSF9DSEFOTkVMLnRlc3QodXJsKSxcbiAgZGFpbHltb3Rpb246ICh1cmwpID0+IE1BVENIX1VSTF9EQUlMWU1PVElPTi50ZXN0KHVybCksXG4gIG1peGNsb3VkOiAodXJsKSA9PiBNQVRDSF9VUkxfTUlYQ0xPVUQudGVzdCh1cmwpLFxuICB2aWR5YXJkOiAodXJsKSA9PiBNQVRDSF9VUkxfVklEWUFSRC50ZXN0KHVybCksXG4gIGthbHR1cmE6ICh1cmwpID0+IE1BVENIX1VSTF9LQUxUVVJBLnRlc3QodXJsKSxcbiAgZmlsZTogY2FuUGxheUZpbGVcbn07XG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2dldE93blByb3BEZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJnZXQiLCJlbnVtZXJhYmxlIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsIl9fdG9Db21tb25KUyIsIm1vZCIsInZhbHVlIiwicGF0dGVybnNfZXhwb3J0cyIsIkFVRElPX0VYVEVOU0lPTlMiLCJEQVNIX0VYVEVOU0lPTlMiLCJGTFZfRVhURU5TSU9OUyIsIkhMU19FWFRFTlNJT05TIiwiTUFUQ0hfVVJMX0RBSUxZTU9USU9OIiwiTUFUQ0hfVVJMX0ZBQ0VCT09LIiwiTUFUQ0hfVVJMX0ZBQ0VCT09LX1dBVENIIiwiTUFUQ0hfVVJMX0tBTFRVUkEiLCJNQVRDSF9VUkxfTUlYQ0xPVUQiLCJNQVRDSF9VUkxfU09VTkRDTE9VRCIsIk1BVENIX1VSTF9TVFJFQU1BQkxFIiwiTUFUQ0hfVVJMX1RXSVRDSF9DSEFOTkVMIiwiTUFUQ0hfVVJMX1RXSVRDSF9WSURFTyIsIk1BVENIX1VSTF9WSURZQVJEIiwiTUFUQ0hfVVJMX1ZJTUVPIiwiTUFUQ0hfVVJMX1dJU1RJQSIsIk1BVENIX1VSTF9ZT1VUVUJFIiwiVklERU9fRVhURU5TSU9OUyIsImNhblBsYXkiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1wb3J0X3V0aWxzIiwicmVxdWlyZSIsImNhblBsYXlGaWxlIiwidXJsIiwiQXJyYXkiLCJpdGVtIiwic3JjIiwiaXNNZWRpYVN0cmVhbSIsImlzQmxvYlVybCIsInRlc3QiLCJ5b3V0dWJlIiwiZXZlcnkiLCJzb3VuZGNsb3VkIiwidmltZW8iLCJmYWNlYm9vayIsInN0cmVhbWFibGUiLCJ3aXN0aWEiLCJ0d2l0Y2giLCJkYWlseW1vdGlvbiIsIm1peGNsb3VkIiwidmlkeWFyZCIsImthbHR1cmEiLCJmaWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/patterns.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/DailyMotion.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-player/lib/players/DailyMotion.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar DailyMotion_exports = {};\n__export(DailyMotion_exports, {\n    default: ()=>DailyMotion\n});\nmodule.exports = __toCommonJS(DailyMotion_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://api.dmcdn.net/all.js\";\nconst SDK_GLOBAL = \"DM\";\nconst SDK_GLOBAL_READY = \"dmAsyncInit\";\nclass DailyMotion extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"onDurationChange\", ()=>{\n            const duration = this.getDuration();\n            this.props.onDuration(duration);\n        });\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"setMuted\", true);\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"setMuted\", false);\n        });\n        __publicField(this, \"ref\", (container)=>{\n            this.container = container;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        const { controls, config, onError, playing } = this.props;\n        const [, id] = url.match(import_patterns.MATCH_URL_DAILYMOTION);\n        if (this.player) {\n            this.player.load(id, {\n                start: (0, import_utils.parseStartTime)(url),\n                autoplay: playing\n            });\n            return;\n        }\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, (DM)=>DM.player).then((DM)=>{\n            if (!this.container) return;\n            const Player = DM.player;\n            this.player = new Player(this.container, {\n                width: \"100%\",\n                height: \"100%\",\n                video: id,\n                params: {\n                    controls,\n                    autoplay: this.props.playing,\n                    mute: this.props.muted,\n                    start: (0, import_utils.parseStartTime)(url),\n                    origin: window.location.origin,\n                    ...config.params\n                },\n                events: {\n                    apiready: this.props.onReady,\n                    seeked: ()=>this.props.onSeek(this.player.currentTime),\n                    video_end: this.props.onEnded,\n                    durationchange: this.onDurationChange,\n                    pause: this.props.onPause,\n                    playing: this.props.onPlay,\n                    waiting: this.props.onBuffer,\n                    error: (event)=>onError(event)\n                }\n            });\n        }, onError);\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {}\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"seek\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    getDuration() {\n        return this.player.duration || null;\n    }\n    getCurrentTime() {\n        return this.player.currentTime;\n    }\n    getSecondsLoaded() {\n        return this.player.bufferedTime;\n    }\n    render() {\n        const { display } = this.props;\n        const style = {\n            width: \"100%\",\n            height: \"100%\",\n            display\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style\n        }, /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            ref: this.ref\n        }));\n    }\n}\n__publicField(DailyMotion, \"displayName\", \"DailyMotion\");\n__publicField(DailyMotion, \"canPlay\", import_patterns.canPlay.dailymotion);\n__publicField(DailyMotion, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL0RhaWx5TW90aW9uLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxXQUFXQyxPQUFPQyxNQUFNO0FBQzVCLElBQUlDLFlBQVlGLE9BQU9HLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CSixPQUFPSyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CTixPQUFPTyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZVIsT0FBT1MsY0FBYztBQUN4QyxJQUFJQyxlQUFlVixPQUFPVyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1aLFVBQVVZLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksV0FBVyxDQUFDQyxRQUFRQztJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZwQixVQUFVbUIsUUFBUUUsTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRU4sWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSVEsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJWixPQUFPVCxrQkFBa0JxQixNQUNoQyxJQUFJLENBQUNqQixhQUFhb0IsSUFBSSxDQUFDSixJQUFJWCxRQUFRQSxRQUFRYSxRQUN6QzFCLFVBQVV3QixJQUFJWCxLQUFLO1lBQUVTLEtBQUssSUFBTUcsSUFBSSxDQUFDWixJQUFJO1lBQUVFLFlBQVksQ0FBRVksQ0FBQUEsT0FBT3pCLGlCQUFpQnVCLE1BQU1aLElBQUcsS0FBTWMsS0FBS1osVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT1M7QUFDVDtBQUNBLElBQUlLLFVB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QUNaLE9BQU8sSUFBSSxDQUFDZSxNQUFNLENBQUNoQixRQUFRLElBQUk7SUFDakM7SUFDQXlELGlCQUFpQjtRQUNmLE9BQU8sSUFBSSxDQUFDekMsTUFBTSxDQUFDc0IsV0FBVztJQUNoQztJQUNBb0IsbUJBQW1CO1FBQ2pCLE9BQU8sSUFBSSxDQUFDMUMsTUFBTSxDQUFDMkMsWUFBWTtJQUNqQztJQUNBQyxTQUFTO1FBQ1AsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMzRCxLQUFLO1FBQzlCLE1BQU00RCxRQUFRO1lBQ1p0QyxPQUFPO1lBQ1BDLFFBQVE7WUFDUm9DO1FBQ0Y7UUFDQSxPQUFPLGFBQWEsR0FBR3hFLGFBQWFKLE9BQU8sQ0FBQzhFLGFBQWEsQ0FBQyxPQUFPO1lBQUVEO1FBQU0sR0FBRyxhQUFhLEdBQUd6RSxhQUFhSixPQUFPLENBQUM4RSxhQUFhLENBQUMsT0FBTztZQUFFQyxLQUFLLElBQUksQ0FBQ0EsR0FBRztRQUFDO0lBQ3hKO0FBQ0Y7QUFDQWpGLGNBQWNHLGFBQWEsZUFBZTtBQUMxQ0gsY0FBY0csYUFBYSxXQUFXTSxnQkFBZ0J5RSxPQUFPLENBQUNDLFdBQVc7QUFDekVuRixjQUFjRyxhQUFhLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWxlYm90X2Zvcl9jaHJpc3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL0RhaWx5TW90aW9uLmpzP2NlYTMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ge1xuICBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xudmFyIERhaWx5TW90aW9uX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KERhaWx5TW90aW9uX2V4cG9ydHMsIHtcbiAgZGVmYXVsdDogKCkgPT4gRGFpbHlNb3Rpb25cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoRGFpbHlNb3Rpb25fZXhwb3J0cyk7XG52YXIgaW1wb3J0X3JlYWN0ID0gX190b0VTTShyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIGltcG9ydF91dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbnZhciBpbXBvcnRfcGF0dGVybnMgPSByZXF1aXJlKFwiLi4vcGF0dGVybnNcIik7XG5jb25zdCBTREtfVVJMID0gXCJodHRwczovL2FwaS5kbWNkbi5uZXQvYWxsLmpzXCI7XG5jb25zdCBTREtfR0xPQkFMID0gXCJETVwiO1xuY29uc3QgU0RLX0dMT0JBTF9SRUFEWSA9IFwiZG1Bc3luY0luaXRcIjtcbmNsYXNzIERhaWx5TW90aW9uIGV4dGVuZHMgaW1wb3J0X3JlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImNhbGxQbGF5ZXJcIiwgaW1wb3J0X3V0aWxzLmNhbGxQbGF5ZXIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvbkR1cmF0aW9uQ2hhbmdlXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5nZXREdXJhdGlvbigpO1xuICAgICAgdGhpcy5wcm9wcy5vbkR1cmF0aW9uKGR1cmF0aW9uKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibXV0ZVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoXCJzZXRNdXRlZFwiLCB0cnVlKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwidW5tdXRlXCIsICgpID0+IHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcihcInNldE11dGVkXCIsIGZhbHNlKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicmVmXCIsIChjb250YWluZXIpID0+IHtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIH0pO1xuICB9XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMub25Nb3VudCAmJiB0aGlzLnByb3BzLm9uTW91bnQodGhpcyk7XG4gIH1cbiAgbG9hZCh1cmwpIHtcbiAgICBjb25zdCB7IGNvbnRyb2xzLCBjb25maWcsIG9uRXJyb3IsIHBsYXlpbmcgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgWywgaWRdID0gdXJsLm1hdGNoKGltcG9ydF9wYXR0ZXJucy5NQVRDSF9VUkxfREFJTFlNT1RJT04pO1xuICAgIGlmICh0aGlzLnBsYXllcikge1xuICAgICAgdGhpcy5wbGF5ZXIubG9hZChpZCwge1xuICAgICAgICBzdGFydDogKDAsIGltcG9ydF91dGlscy5wYXJzZVN0YXJ0VGltZSkodXJsKSxcbiAgICAgICAgYXV0b3BsYXk6IHBsYXlpbmdcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAoMCwgaW1wb3J0X3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCwgU0RLX0dMT0JBTF9SRUFEWSwgKERNKSA9PiBETS5wbGF5ZXIpLnRoZW4oKERNKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuY29udGFpbmVyKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBQbGF5ZXIgPSBETS5wbGF5ZXI7XG4gICAgICB0aGlzLnBsYXllciA9IG5ldyBQbGF5ZXIodGhpcy5jb250YWluZXIsIHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICB2aWRlbzogaWQsXG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGNvbnRyb2xzLFxuICAgICAgICAgIGF1dG9wbGF5OiB0aGlzLnByb3BzLnBsYXlpbmcsXG4gICAgICAgICAgbXV0ZTogdGhpcy5wcm9wcy5tdXRlZCxcbiAgICAgICAgICBzdGFydDogKDAsIGltcG9ydF91dGlscy5wYXJzZVN0YXJ0VGltZSkodXJsKSxcbiAgICAgICAgICBvcmlnaW46IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sXG4gICAgICAgICAgLi4uY29uZmlnLnBhcmFtc1xuICAgICAgICB9LFxuICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICBhcGlyZWFkeTogdGhpcy5wcm9wcy5vblJlYWR5LFxuICAgICAgICAgIHNlZWtlZDogKCkgPT4gdGhpcy5wcm9wcy5vblNlZWsodGhpcy5wbGF5ZXIuY3VycmVudFRpbWUpLFxuICAgICAgICAgIHZpZGVvX2VuZDogdGhpcy5wcm9wcy5vbkVuZGVkLFxuICAgICAgICAgIGR1cmF0aW9uY2hhbmdlOiB0aGlzLm9uRHVyYXRpb25DaGFuZ2UsXG4gICAgICAgICAgcGF1c2U6IHRoaXMucHJvcHMub25QYXVzZSxcbiAgICAgICAgICBwbGF5aW5nOiB0aGlzLnByb3BzLm9uUGxheSxcbiAgICAgICAgICB3YWl0aW5nOiB0aGlzLnByb3BzLm9uQnVmZmVyLFxuICAgICAgICAgIGVycm9yOiAoZXZlbnQpID0+IG9uRXJyb3IoZXZlbnQpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIG9uRXJyb3IpO1xuICB9XG4gIHBsYXkoKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwicGxheVwiKTtcbiAgfVxuICBwYXVzZSgpIHtcbiAgICB0aGlzLmNhbGxQbGF5ZXIoXCJwYXVzZVwiKTtcbiAgfVxuICBzdG9wKCkge1xuICB9XG4gIHNlZWtUbyhzZWNvbmRzLCBrZWVwUGxheWluZyA9IHRydWUpIHtcbiAgICB0aGlzLmNhbGxQbGF5ZXIoXCJzZWVrXCIsIHNlY29uZHMpO1xuICAgIGlmICgha2VlcFBsYXlpbmcpIHtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG4gIH1cbiAgc2V0Vm9sdW1lKGZyYWN0aW9uKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwic2V0Vm9sdW1lXCIsIGZyYWN0aW9uKTtcbiAgfVxuICBnZXREdXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZHVyYXRpb24gfHwgbnVsbDtcbiAgfVxuICBnZXRDdXJyZW50VGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIuY3VycmVudFRpbWU7XG4gIH1cbiAgZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIuYnVmZmVyZWRUaW1lO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGRpc3BsYXkgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgc3R5bGUgPSB7XG4gICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgZGlzcGxheVxuICAgIH07XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBpbXBvcnRfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGUgfSwgLyogQF9fUFVSRV9fICovIGltcG9ydF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyByZWY6IHRoaXMucmVmIH0pKTtcbiAgfVxufVxuX19wdWJsaWNGaWVsZChEYWlseU1vdGlvbiwgXCJkaXNwbGF5TmFtZVwiLCBcIkRhaWx5TW90aW9uXCIpO1xuX19wdWJsaWNGaWVsZChEYWlseU1vdGlvbiwgXCJjYW5QbGF5XCIsIGltcG9ydF9wYXR0ZXJucy5jYW5QbGF5LmRhaWx5bW90aW9uKTtcbl9fcHVibGljRmllbGQoRGFpbHlNb3Rpb24sIFwibG9vcE9uRW5kZWRcIiwgdHJ1ZSk7XG4iXSwibmFtZXMiOlsiX19jcmVhdGUiLCJPYmplY3QiLCJjcmVhdGUiLCJfX2RlZlByb3AiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2dldFByb3RvT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJnZXQiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJjYWxsIiwiX190b0VTTSIsIm1vZCIsImlzTm9kZU1vZGUiLCJfX2VzTW9kdWxlIiwiX190b0NvbW1vbkpTIiwiX19wdWJsaWNGaWVsZCIsIkRhaWx5TW90aW9uX2V4cG9ydHMiLCJkZWZhdWx0IiwiRGFpbHlNb3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1wb3J0X3JlYWN0IiwicmVxdWlyZSIsImltcG9ydF91dGlscyIsImltcG9ydF9wYXR0ZXJucyIsIlNES19VUkwiLCJTREtfR0xPQkFMIiwiU0RLX0dMT0JBTF9SRUFEWSIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiY2FsbFBsYXllciIsImR1cmF0aW9uIiwiZ2V0RHVyYXRpb24iLCJwcm9wcyIsIm9uRHVyYXRpb24iLCJjb250YWluZXIiLCJjb21wb25lbnREaWRNb3VudCIsIm9uTW91bnQiLCJsb2FkIiwidXJsIiwiY29udHJvbHMiLCJjb25maWciLCJvbkVycm9yIiwicGxheWluZyIsImlkIiwibWF0Y2giLCJNQVRDSF9VUkxfREFJTFlNT1RJT04iLCJwbGF5ZXIiLCJzdGFydCIsInBhcnNlU3RhcnRUaW1lIiwiYXV0b3BsYXkiLCJnZXRTREsiLCJETSIsInRoZW4iLCJQbGF5ZXIiLCJ3aWR0aCIsImhlaWdodCIsInZpZGVvIiwicGFyYW1zIiwibXV0ZSIsIm11dGVkIiwib3JpZ2luIiwid2luZG93IiwibG9jYXRpb24iLCJldmVudHMiLCJhcGlyZWFkeSIsIm9uUmVhZHkiLCJzZWVrZWQiLCJvblNlZWsiLCJjdXJyZW50VGltZSIsInZpZGVvX2VuZCIsIm9uRW5kZWQiLCJkdXJhdGlvbmNoYW5nZSIsIm9uRHVyYXRpb25DaGFuZ2UiLCJwYXVzZSIsIm9uUGF1c2UiLCJvblBsYXkiLCJ3YWl0aW5nIiwib25CdWZmZXIiLCJlcnJvciIsImV2ZW50IiwicGxheSIsInN0b3AiLCJzZWVrVG8iLCJzZWNvbmRzIiwia2VlcFBsYXlpbmciLCJzZXRWb2x1bWUiLCJmcmFjdGlvbiIsImdldEN1cnJlbnRUaW1lIiwiZ2V0U2Vjb25kc0xvYWRlZCIsImJ1ZmZlcmVkVGltZSIsInJlbmRlciIsImRpc3BsYXkiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiLCJjYW5QbGF5IiwiZGFpbHltb3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/DailyMotion.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Facebook.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Facebook.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Facebook_exports = {};\n__export(Facebook_exports, {\n    default: ()=>Facebook\n});\nmodule.exports = __toCommonJS(Facebook_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://connect.facebook.net/en_US/sdk.js\";\nconst SDK_GLOBAL = \"FB\";\nconst SDK_GLOBAL_READY = \"fbAsyncInit\";\nconst PLAYER_ID_PREFIX = \"facebook-player-\";\nclass Facebook extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"playerID\", this.props.config.playerId || `${PLAYER_ID_PREFIX}${(0, import_utils.randomString)()}`);\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"mute\");\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"unmute\");\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url, isReady) {\n        if (isReady) {\n            (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then((FB)=>FB.XFBML.parse());\n            return;\n        }\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then((FB)=>{\n            FB.init({\n                appId: this.props.config.appId,\n                xfbml: true,\n                version: this.props.config.version\n            });\n            FB.Event.subscribe(\"xfbml.render\", (msg)=>{\n                this.props.onLoaded();\n            });\n            FB.Event.subscribe(\"xfbml.ready\", (msg)=>{\n                if (msg.type === \"video\" && msg.id === this.playerID) {\n                    this.player = msg.instance;\n                    this.player.subscribe(\"startedPlaying\", this.props.onPlay);\n                    this.player.subscribe(\"paused\", this.props.onPause);\n                    this.player.subscribe(\"finishedPlaying\", this.props.onEnded);\n                    this.player.subscribe(\"startedBuffering\", this.props.onBuffer);\n                    this.player.subscribe(\"finishedBuffering\", this.props.onBufferEnd);\n                    this.player.subscribe(\"error\", this.props.onError);\n                    if (this.props.muted) {\n                        this.callPlayer(\"mute\");\n                    } else {\n                        this.callPlayer(\"unmute\");\n                    }\n                    this.props.onReady();\n                    document.getElementById(this.playerID).querySelector(\"iframe\").style.visibility = \"visible\";\n                }\n            });\n        });\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {}\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"seek\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    getDuration() {\n        return this.callPlayer(\"getDuration\");\n    }\n    getCurrentTime() {\n        return this.callPlayer(\"getCurrentPosition\");\n    }\n    getSecondsLoaded() {\n        return null;\n    }\n    render() {\n        const { attributes } = this.props.config;\n        const style = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style,\n            id: this.playerID,\n            className: \"fb-video\",\n            \"data-href\": this.props.url,\n            \"data-autoplay\": this.props.playing ? \"true\" : \"false\",\n            \"data-allowfullscreen\": \"true\",\n            \"data-controls\": this.props.controls ? \"true\" : \"false\",\n            ...attributes\n        });\n    }\n}\n__publicField(Facebook, \"displayName\", \"Facebook\");\n__publicField(Facebook, \"canPlay\", import_patterns.canPlay.facebook);\n__publicField(Facebook, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Facebook.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/FilePlayer.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/FilePlayer.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar FilePlayer_exports = {};\n__export(FilePlayer_exports, {\n    default: ()=>FilePlayer\n});\nmodule.exports = __toCommonJS(FilePlayer_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst HAS_NAVIGATOR = typeof navigator !== \"undefined\";\nconst IS_IPAD_PRO = HAS_NAVIGATOR && navigator.platform === \"MacIntel\" && navigator.maxTouchPoints > 1;\nconst IS_IOS = HAS_NAVIGATOR && (/iPad|iPhone|iPod/.test(navigator.userAgent) || IS_IPAD_PRO) && !window.MSStream;\nconst IS_SAFARI = HAS_NAVIGATOR && /^((?!chrome|android).)*safari/i.test(navigator.userAgent) && !window.MSStream;\nconst HLS_SDK_URL = \"https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js\";\nconst HLS_GLOBAL = \"Hls\";\nconst DASH_SDK_URL = \"https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js\";\nconst DASH_GLOBAL = \"dashjs\";\nconst FLV_SDK_URL = \"https://cdn.jsdelivr.net/npm/flv.js@VERSION/dist/flv.min.js\";\nconst FLV_GLOBAL = \"flvjs\";\nconst MATCH_DROPBOX_URL = /www\\.dropbox\\.com\\/.+/;\nconst MATCH_CLOUDFLARE_STREAM = /https:\\/\\/watch\\.cloudflarestream\\.com\\/([a-z0-9]+)/;\nconst REPLACE_CLOUDFLARE_STREAM = \"https://videodelivery.net/{id}/manifest/video.m3u8\";\nclass FilePlayer extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        // Proxy methods to prevent listener leaks\n        __publicField(this, \"onReady\", (...args)=>this.props.onReady(...args));\n        __publicField(this, \"onPlay\", (...args)=>this.props.onPlay(...args));\n        __publicField(this, \"onBuffer\", (...args)=>this.props.onBuffer(...args));\n        __publicField(this, \"onBufferEnd\", (...args)=>this.props.onBufferEnd(...args));\n        __publicField(this, \"onPause\", (...args)=>this.props.onPause(...args));\n        __publicField(this, \"onEnded\", (...args)=>this.props.onEnded(...args));\n        __publicField(this, \"onError\", (...args)=>this.props.onError(...args));\n        __publicField(this, \"onPlayBackRateChange\", (event)=>this.props.onPlaybackRateChange(event.target.playbackRate));\n        __publicField(this, \"onEnablePIP\", (...args)=>this.props.onEnablePIP(...args));\n        __publicField(this, \"onDisablePIP\", (e)=>{\n            const { onDisablePIP, playing } = this.props;\n            onDisablePIP(e);\n            if (playing) {\n                this.play();\n            }\n        });\n        __publicField(this, \"onPresentationModeChange\", (e)=>{\n            if (this.player && (0, import_utils.supportsWebKitPresentationMode)(this.player)) {\n                const { webkitPresentationMode } = this.player;\n                if (webkitPresentationMode === \"picture-in-picture\") {\n                    this.onEnablePIP(e);\n                } else if (webkitPresentationMode === \"inline\") {\n                    this.onDisablePIP(e);\n                }\n            }\n        });\n        __publicField(this, \"onSeek\", (e)=>{\n            this.props.onSeek(e.target.currentTime);\n        });\n        __publicField(this, \"mute\", ()=>{\n            this.player.muted = true;\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.player.muted = false;\n        });\n        __publicField(this, \"renderSourceElement\", (source, index)=>{\n            if (typeof source === \"string\") {\n                return /* @__PURE__ */ import_react.default.createElement(\"source\", {\n                    key: index,\n                    src: source\n                });\n            }\n            return /* @__PURE__ */ import_react.default.createElement(\"source\", {\n                key: index,\n                ...source\n            });\n        });\n        __publicField(this, \"renderTrack\", (track, index)=>{\n            return /* @__PURE__ */ import_react.default.createElement(\"track\", {\n                key: index,\n                ...track\n            });\n        });\n        __publicField(this, \"ref\", (player)=>{\n            if (this.player) {\n                this.prevPlayer = this.player;\n            }\n            this.player = player;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n        this.addListeners(this.player);\n        const src = this.getSource(this.props.url);\n        if (src) {\n            this.player.src = src;\n        }\n        if (IS_IOS || this.props.config.forceDisableHls) {\n            this.player.load();\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {\n            this.removeListeners(this.prevPlayer, prevProps.url);\n            this.addListeners(this.player);\n        }\n        if (this.props.url !== prevProps.url && !(0, import_utils.isMediaStream)(this.props.url) && !(this.props.url instanceof Array)) {\n            this.player.srcObject = null;\n        }\n    }\n    componentWillUnmount() {\n        this.player.removeAttribute(\"src\");\n        this.removeListeners(this.player);\n        if (this.hls) {\n            this.hls.destroy();\n        }\n    }\n    addListeners(player) {\n        const { url, playsinline } = this.props;\n        player.addEventListener(\"play\", this.onPlay);\n        player.addEventListener(\"waiting\", this.onBuffer);\n        player.addEventListener(\"playing\", this.onBufferEnd);\n        player.addEventListener(\"pause\", this.onPause);\n        player.addEventListener(\"seeked\", this.onSeek);\n        player.addEventListener(\"ended\", this.onEnded);\n        player.addEventListener(\"error\", this.onError);\n        player.addEventListener(\"ratechange\", this.onPlayBackRateChange);\n        player.addEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n        player.addEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n        player.addEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n        if (!this.shouldUseHLS(url)) {\n            player.addEventListener(\"canplay\", this.onReady);\n        }\n        if (playsinline) {\n            player.setAttribute(\"playsinline\", \"\");\n            player.setAttribute(\"webkit-playsinline\", \"\");\n            player.setAttribute(\"x5-playsinline\", \"\");\n        }\n    }\n    removeListeners(player, url) {\n        player.removeEventListener(\"canplay\", this.onReady);\n        player.removeEventListener(\"play\", this.onPlay);\n        player.removeEventListener(\"waiting\", this.onBuffer);\n        player.removeEventListener(\"playing\", this.onBufferEnd);\n        player.removeEventListener(\"pause\", this.onPause);\n        player.removeEventListener(\"seeked\", this.onSeek);\n        player.removeEventListener(\"ended\", this.onEnded);\n        player.removeEventListener(\"error\", this.onError);\n        player.removeEventListener(\"ratechange\", this.onPlayBackRateChange);\n        player.removeEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n        player.removeEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n        player.removeEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n        if (!this.shouldUseHLS(url)) {\n            player.removeEventListener(\"canplay\", this.onReady);\n        }\n    }\n    shouldUseAudio(props) {\n        if (props.config.forceVideo) {\n            return false;\n        }\n        if (props.config.attributes.poster) {\n            return false;\n        }\n        return import_patterns.AUDIO_EXTENSIONS.test(props.url) || props.config.forceAudio;\n    }\n    shouldUseHLS(url) {\n        if (IS_SAFARI && this.props.config.forceSafariHLS || this.props.config.forceHLS) {\n            return true;\n        }\n        if (IS_IOS || this.props.config.forceDisableHls) {\n            return false;\n        }\n        return import_patterns.HLS_EXTENSIONS.test(url) || MATCH_CLOUDFLARE_STREAM.test(url);\n    }\n    shouldUseDASH(url) {\n        return import_patterns.DASH_EXTENSIONS.test(url) || this.props.config.forceDASH;\n    }\n    shouldUseFLV(url) {\n        return import_patterns.FLV_EXTENSIONS.test(url) || this.props.config.forceFLV;\n    }\n    load(url) {\n        const { hlsVersion, hlsOptions, dashVersion, flvVersion } = this.props.config;\n        if (this.hls) {\n            this.hls.destroy();\n        }\n        if (this.dash) {\n            this.dash.reset();\n        }\n        if (this.shouldUseHLS(url)) {\n            (0, import_utils.getSDK)(HLS_SDK_URL.replace(\"VERSION\", hlsVersion), HLS_GLOBAL).then((Hls)=>{\n                this.hls = new Hls(hlsOptions);\n                this.hls.on(Hls.Events.MANIFEST_PARSED, ()=>{\n                    this.props.onReady();\n                });\n                this.hls.on(Hls.Events.ERROR, (e, data)=>{\n                    this.props.onError(e, data, this.hls, Hls);\n                });\n                if (MATCH_CLOUDFLARE_STREAM.test(url)) {\n                    const id = url.match(MATCH_CLOUDFLARE_STREAM)[1];\n                    this.hls.loadSource(REPLACE_CLOUDFLARE_STREAM.replace(\"{id}\", id));\n                } else {\n                    this.hls.loadSource(url);\n                }\n                this.hls.attachMedia(this.player);\n                this.props.onLoaded();\n            });\n        }\n        if (this.shouldUseDASH(url)) {\n            (0, import_utils.getSDK)(DASH_SDK_URL.replace(\"VERSION\", dashVersion), DASH_GLOBAL).then((dashjs)=>{\n                this.dash = dashjs.MediaPlayer().create();\n                this.dash.initialize(this.player, url, this.props.playing);\n                this.dash.on(\"error\", this.props.onError);\n                if (parseInt(dashVersion) < 3) {\n                    this.dash.getDebug().setLogToBrowserConsole(false);\n                } else {\n                    this.dash.updateSettings({\n                        debug: {\n                            logLevel: dashjs.Debug.LOG_LEVEL_NONE\n                        }\n                    });\n                }\n                this.props.onLoaded();\n            });\n        }\n        if (this.shouldUseFLV(url)) {\n            (0, import_utils.getSDK)(FLV_SDK_URL.replace(\"VERSION\", flvVersion), FLV_GLOBAL).then((flvjs)=>{\n                this.flv = flvjs.createPlayer({\n                    type: \"flv\",\n                    url\n                });\n                this.flv.attachMediaElement(this.player);\n                this.flv.on(flvjs.Events.ERROR, (e, data)=>{\n                    this.props.onError(e, data, this.flv, flvjs);\n                });\n                this.flv.load();\n                this.props.onLoaded();\n            });\n        }\n        if (url instanceof Array) {\n            this.player.load();\n        } else if ((0, import_utils.isMediaStream)(url)) {\n            try {\n                this.player.srcObject = url;\n            } catch (e) {\n                this.player.src = window.URL.createObjectURL(url);\n            }\n        }\n    }\n    play() {\n        const promise = this.player.play();\n        if (promise) {\n            promise.catch(this.props.onError);\n        }\n    }\n    pause() {\n        this.player.pause();\n    }\n    stop() {\n        this.player.removeAttribute(\"src\");\n        if (this.dash) {\n            this.dash.reset();\n        }\n    }\n    seekTo(seconds, keepPlaying = true) {\n        this.player.currentTime = seconds;\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.player.volume = fraction;\n    }\n    enablePIP() {\n        if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {\n            this.player.requestPictureInPicture();\n        } else if ((0, import_utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== \"picture-in-picture\") {\n            this.player.webkitSetPresentationMode(\"picture-in-picture\");\n        }\n    }\n    disablePIP() {\n        if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {\n            document.exitPictureInPicture();\n        } else if ((0, import_utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== \"inline\") {\n            this.player.webkitSetPresentationMode(\"inline\");\n        }\n    }\n    setPlaybackRate(rate) {\n        try {\n            this.player.playbackRate = rate;\n        } catch (error) {\n            this.props.onError(error);\n        }\n    }\n    getDuration() {\n        if (!this.player) return null;\n        const { duration, seekable } = this.player;\n        if (duration === Infinity && seekable.length > 0) {\n            return seekable.end(seekable.length - 1);\n        }\n        return duration;\n    }\n    getCurrentTime() {\n        if (!this.player) return null;\n        return this.player.currentTime;\n    }\n    getSecondsLoaded() {\n        if (!this.player) return null;\n        const { buffered } = this.player;\n        if (buffered.length === 0) {\n            return 0;\n        }\n        const end = buffered.end(buffered.length - 1);\n        const duration = this.getDuration();\n        if (end > duration) {\n            return duration;\n        }\n        return end;\n    }\n    getSource(url) {\n        const useHLS = this.shouldUseHLS(url);\n        const useDASH = this.shouldUseDASH(url);\n        const useFLV = this.shouldUseFLV(url);\n        if (url instanceof Array || (0, import_utils.isMediaStream)(url) || useHLS || useDASH || useFLV) {\n            return void 0;\n        }\n        if (MATCH_DROPBOX_URL.test(url)) {\n            return url.replace(\"www.dropbox.com\", \"dl.dropboxusercontent.com\");\n        }\n        return url;\n    }\n    render() {\n        const { url, playing, loop, controls, muted, config, width, height } = this.props;\n        const useAudio = this.shouldUseAudio(this.props);\n        const Element = useAudio ? \"audio\" : \"video\";\n        const style = {\n            width: width === \"auto\" ? width : \"100%\",\n            height: height === \"auto\" ? height : \"100%\"\n        };\n        return /* @__PURE__ */ import_react.default.createElement(Element, {\n            ref: this.ref,\n            src: this.getSource(url),\n            style,\n            preload: \"auto\",\n            autoPlay: playing || void 0,\n            controls,\n            muted,\n            loop,\n            ...config.attributes\n        }, url instanceof Array && url.map(this.renderSourceElement), config.tracks.map(this.renderTrack));\n    }\n}\n__publicField(FilePlayer, \"displayName\", \"FilePlayer\");\n__publicField(FilePlayer, \"canPlay\", import_patterns.canPlay.file);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL0ZpbGVQbGF5ZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFdBQVdDLE9BQU9DLE1BQU07QUFDNUIsSUFBSUMsWUFBWUYsT0FBT0csY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJKLE9BQU9LLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JOLE9BQU9PLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlUixPQUFPUyxjQUFjO0FBQ3hDLElBQUlDLGVBQWVWLE9BQU9XLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTVosVUFBVVksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxXQUFXLENBQUNDLFFBQVFDO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZnBCLFVBQVVtQixRQUFRRSxNQUFNO1FBQUVDLEtBQUtGLEdBQUcsQ0FBQ0MsS0FBSztRQUFFTixZQUFZO0lBQUs7QUFDL0Q7QUFDQSxJQUFJUSxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlaLE9BQU9ULGtCQUFrQnFCLE1BQ2hDLElBQUksQ0FBQ2pCLGFBQWFvQixJQUFJLENBQUNKLElBQUlYLFFBQVFBLFFBQVFhLFFBQ3pDMUIsVUFBVXdCLElBQUlYLEtBQUs7WUFBRVMsS0FBSyxJQUFNRyxJQUFJLENBQUNaLElBQUk7WUFBRUUsWUFBWSxDQUFFWSxDQUFBQSxPQUFPekIsaUJBQWlCdUIsTUFBTVosSUFBRyxLQUFNYyxLQUFLWixVQUFVO1FBQUM7SUFDdEg7SUFDQSxPQUFPUztBQUNUO0FBQ0EsSUFBSUssVUFB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QWNHLFlBQVksZUFBZTtBQUN6Q0gsY0FBY0csWUFBWSxXQUFXTSxnQkFBZ0JrTCxPQUFPLENBQUNDLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWxlYm90X2Zvcl9jaHJpc3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL0ZpbGVQbGF5ZXIuanM/NjAzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gIF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgRmlsZVBsYXllcl9leHBvcnRzID0ge307XG5fX2V4cG9ydChGaWxlUGxheWVyX2V4cG9ydHMsIHtcbiAgZGVmYXVsdDogKCkgPT4gRmlsZVBsYXllclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhGaWxlUGxheWVyX2V4cG9ydHMpO1xudmFyIGltcG9ydF9yZWFjdCA9IF9fdG9FU00ocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBpbXBvcnRfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG52YXIgaW1wb3J0X3BhdHRlcm5zID0gcmVxdWlyZShcIi4uL3BhdHRlcm5zXCIpO1xuY29uc3QgSEFTX05BVklHQVRPUiA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCBJU19JUEFEX1BSTyA9IEhBU19OQVZJR0FUT1IgJiYgbmF2aWdhdG9yLnBsYXRmb3JtID09PSBcIk1hY0ludGVsXCIgJiYgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMTtcbmNvbnN0IElTX0lPUyA9IEhBU19OQVZJR0FUT1IgJiYgKC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IElTX0lQQURfUFJPKSAmJiAhd2luZG93Lk1TU3RyZWFtO1xuY29uc3QgSVNfU0FGQVJJID0gSEFTX05BVklHQVRPUiAmJiAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICF3aW5kb3cuTVNTdHJlYW07XG5jb25zdCBITFNfU0RLX1VSTCA9IFwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9obHMuanNAVkVSU0lPTi9kaXN0L2hscy5taW4uanNcIjtcbmNvbnN0IEhMU19HTE9CQUwgPSBcIkhsc1wiO1xuY29uc3QgREFTSF9TREtfVVJMID0gXCJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9kYXNoanMvVkVSU0lPTi9kYXNoLmFsbC5taW4uanNcIjtcbmNvbnN0IERBU0hfR0xPQkFMID0gXCJkYXNoanNcIjtcbmNvbnN0IEZMVl9TREtfVVJMID0gXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Zsdi5qc0BWRVJTSU9OL2Rpc3QvZmx2Lm1pbi5qc1wiO1xuY29uc3QgRkxWX0dMT0JBTCA9IFwiZmx2anNcIjtcbmNvbnN0IE1BVENIX0RST1BCT1hfVVJMID0gL3d3d1xcLmRyb3Bib3hcXC5jb21cXC8uKy87XG5jb25zdCBNQVRDSF9DTE9VREZMQVJFX1NUUkVBTSA9IC9odHRwczpcXC9cXC93YXRjaFxcLmNsb3VkZmxhcmVzdHJlYW1cXC5jb21cXC8oW2EtejAtOV0rKS87XG5jb25zdCBSRVBMQUNFX0NMT1VERkxBUkVfU1RSRUFNID0gXCJodHRwczovL3ZpZGVvZGVsaXZlcnkubmV0L3tpZH0vbWFuaWZlc3QvdmlkZW8ubTN1OFwiO1xuY2xhc3MgRmlsZVBsYXllciBleHRlbmRzIGltcG9ydF9yZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8vIFByb3h5IG1ldGhvZHMgdG8gcHJldmVudCBsaXN0ZW5lciBsZWFrc1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvblJlYWR5XCIsICguLi5hcmdzKSA9PiB0aGlzLnByb3BzLm9uUmVhZHkoLi4uYXJncykpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvblBsYXlcIiwgKC4uLmFyZ3MpID0+IHRoaXMucHJvcHMub25QbGF5KC4uLmFyZ3MpKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwib25CdWZmZXJcIiwgKC4uLmFyZ3MpID0+IHRoaXMucHJvcHMub25CdWZmZXIoLi4uYXJncykpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvbkJ1ZmZlckVuZFwiLCAoLi4uYXJncykgPT4gdGhpcy5wcm9wcy5vbkJ1ZmZlckVuZCguLi5hcmdzKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9uUGF1c2VcIiwgKC4uLmFyZ3MpID0+IHRoaXMucHJvcHMub25QYXVzZSguLi5hcmdzKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9uRW5kZWRcIiwgKC4uLmFyZ3MpID0+IHRoaXMucHJvcHMub25FbmRlZCguLi5hcmdzKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9uRXJyb3JcIiwgKC4uLmFyZ3MpID0+IHRoaXMucHJvcHMub25FcnJvciguLi5hcmdzKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9uUGxheUJhY2tSYXRlQ2hhbmdlXCIsIChldmVudCkgPT4gdGhpcy5wcm9wcy5vblBsYXliYWNrUmF0ZUNoYW5nZShldmVudC50YXJnZXQucGxheWJhY2tSYXRlKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9uRW5hYmxlUElQXCIsICguLi5hcmdzKSA9PiB0aGlzLnByb3BzLm9uRW5hYmxlUElQKC4uLmFyZ3MpKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwib25EaXNhYmxlUElQXCIsIChlKSA9PiB7XG4gICAgICBjb25zdCB7IG9uRGlzYWJsZVBJUCwgcGxheWluZyB9ID0gdGhpcy5wcm9wcztcbiAgICAgIG9uRGlzYWJsZVBJUChlKTtcbiAgICAgIGlmIChwbGF5aW5nKSB7XG4gICAgICAgIHRoaXMucGxheSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvblByZXNlbnRhdGlvbk1vZGVDaGFuZ2VcIiwgKGUpID0+IHtcbiAgICAgIGlmICh0aGlzLnBsYXllciAmJiAoMCwgaW1wb3J0X3V0aWxzLnN1cHBvcnRzV2ViS2l0UHJlc2VudGF0aW9uTW9kZSkodGhpcy5wbGF5ZXIpKSB7XG4gICAgICAgIGNvbnN0IHsgd2Via2l0UHJlc2VudGF0aW9uTW9kZSB9ID0gdGhpcy5wbGF5ZXI7XG4gICAgICAgIGlmICh3ZWJraXRQcmVzZW50YXRpb25Nb2RlID09PSBcInBpY3R1cmUtaW4tcGljdHVyZVwiKSB7XG4gICAgICAgICAgdGhpcy5vbkVuYWJsZVBJUChlKTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWJraXRQcmVzZW50YXRpb25Nb2RlID09PSBcImlubGluZVwiKSB7XG4gICAgICAgICAgdGhpcy5vbkRpc2FibGVQSVAoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwib25TZWVrXCIsIChlKSA9PiB7XG4gICAgICB0aGlzLnByb3BzLm9uU2VlayhlLnRhcmdldC5jdXJyZW50VGltZSk7XG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm11dGVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5wbGF5ZXIubXV0ZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ1bm11dGVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5wbGF5ZXIubXV0ZWQgPSBmYWxzZTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicmVuZGVyU291cmNlRWxlbWVudFwiLCAoc291cmNlLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBpbXBvcnRfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic291cmNlXCIsIHsga2V5OiBpbmRleCwgc3JjOiBzb3VyY2UgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGltcG9ydF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzb3VyY2VcIiwgeyBrZXk6IGluZGV4LCAuLi5zb3VyY2UgfSk7XG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJlbmRlclRyYWNrXCIsICh0cmFjaywgaW5kZXgpID0+IHtcbiAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gaW1wb3J0X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInRyYWNrXCIsIHsga2V5OiBpbmRleCwgLi4udHJhY2sgfSk7XG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJlZlwiLCAocGxheWVyKSA9PiB7XG4gICAgICBpZiAodGhpcy5wbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5wcmV2UGxheWVyID0gdGhpcy5wbGF5ZXI7XG4gICAgICB9XG4gICAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICB9KTtcbiAgfVxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLm9uTW91bnQgJiYgdGhpcy5wcm9wcy5vbk1vdW50KHRoaXMpO1xuICAgIHRoaXMuYWRkTGlzdGVuZXJzKHRoaXMucGxheWVyKTtcbiAgICBjb25zdCBzcmMgPSB0aGlzLmdldFNvdXJjZSh0aGlzLnByb3BzLnVybCk7XG4gICAgaWYgKHNyYykge1xuICAgICAgdGhpcy5wbGF5ZXIuc3JjID0gc3JjO1xuICAgIH1cbiAgICBpZiAoSVNfSU9TIHx8IHRoaXMucHJvcHMuY29uZmlnLmZvcmNlRGlzYWJsZUhscykge1xuICAgICAgdGhpcy5wbGF5ZXIubG9hZCgpO1xuICAgIH1cbiAgfVxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMuc2hvdWxkVXNlQXVkaW8odGhpcy5wcm9wcykgIT09IHRoaXMuc2hvdWxkVXNlQXVkaW8ocHJldlByb3BzKSkge1xuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnModGhpcy5wcmV2UGxheWVyLCBwcmV2UHJvcHMudXJsKTtcbiAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKHRoaXMucGxheWVyKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMudXJsICE9PSBwcmV2UHJvcHMudXJsICYmICEoMCwgaW1wb3J0X3V0aWxzLmlzTWVkaWFTdHJlYW0pKHRoaXMucHJvcHMudXJsKSAmJiAhKHRoaXMucHJvcHMudXJsIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICB0aGlzLnBsYXllci5zcmNPYmplY3QgPSBudWxsO1xuICAgIH1cbiAgfVxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnBsYXllci5yZW1vdmVBdHRyaWJ1dGUoXCJzcmNcIik7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnModGhpcy5wbGF5ZXIpO1xuICAgIGlmICh0aGlzLmhscykge1xuICAgICAgdGhpcy5obHMuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxuICBhZGRMaXN0ZW5lcnMocGxheWVyKSB7XG4gICAgY29uc3QgeyB1cmwsIHBsYXlzaW5saW5lIH0gPSB0aGlzLnByb3BzO1xuICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKFwicGxheVwiLCB0aGlzLm9uUGxheSk7XG4gICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ3YWl0aW5nXCIsIHRoaXMub25CdWZmZXIpO1xuICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKFwicGxheWluZ1wiLCB0aGlzLm9uQnVmZmVyRW5kKTtcbiAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihcInBhdXNlXCIsIHRoaXMub25QYXVzZSk7XG4gICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoXCJzZWVrZWRcIiwgdGhpcy5vblNlZWspO1xuICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKFwiZW5kZWRcIiwgdGhpcy5vbkVuZGVkKTtcbiAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIHRoaXMub25FcnJvcik7XG4gICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoXCJyYXRlY2hhbmdlXCIsIHRoaXMub25QbGF5QmFja1JhdGVDaGFuZ2UpO1xuICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKFwiZW50ZXJwaWN0dXJlaW5waWN0dXJlXCIsIHRoaXMub25FbmFibGVQSVApO1xuICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKFwibGVhdmVwaWN0dXJlaW5waWN0dXJlXCIsIHRoaXMub25EaXNhYmxlUElQKTtcbiAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmtpdHByZXNlbnRhdGlvbm1vZGVjaGFuZ2VkXCIsIHRoaXMub25QcmVzZW50YXRpb25Nb2RlQ2hhbmdlKTtcbiAgICBpZiAoIXRoaXMuc2hvdWxkVXNlSExTKHVybCkpIHtcbiAgICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKFwiY2FucGxheVwiLCB0aGlzLm9uUmVhZHkpO1xuICAgIH1cbiAgICBpZiAocGxheXNpbmxpbmUpIHtcbiAgICAgIHBsYXllci5zZXRBdHRyaWJ1dGUoXCJwbGF5c2lubGluZVwiLCBcIlwiKTtcbiAgICAgIHBsYXllci5zZXRBdHRyaWJ1dGUoXCJ3ZWJraXQtcGxheXNpbmxpbmVcIiwgXCJcIik7XG4gICAgICBwbGF5ZXIuc2V0QXR0cmlidXRlKFwieDUtcGxheXNpbmxpbmVcIiwgXCJcIik7XG4gICAgfVxuICB9XG4gIHJlbW92ZUxpc3RlbmVycyhwbGF5ZXIsIHVybCkge1xuICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2FucGxheVwiLCB0aGlzLm9uUmVhZHkpO1xuICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKFwicGxheVwiLCB0aGlzLm9uUGxheSk7XG4gICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3YWl0aW5nXCIsIHRoaXMub25CdWZmZXIpO1xuICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKFwicGxheWluZ1wiLCB0aGlzLm9uQnVmZmVyRW5kKTtcbiAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhdXNlXCIsIHRoaXMub25QYXVzZSk7XG4gICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzZWVrZWRcIiwgdGhpcy5vblNlZWspO1xuICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKFwiZW5kZWRcIiwgdGhpcy5vbkVuZGVkKTtcbiAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIHRoaXMub25FcnJvcik7XG4gICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyYXRlY2hhbmdlXCIsIHRoaXMub25QbGF5QmFja1JhdGVDaGFuZ2UpO1xuICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKFwiZW50ZXJwaWN0dXJlaW5waWN0dXJlXCIsIHRoaXMub25FbmFibGVQSVApO1xuICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKFwibGVhdmVwaWN0dXJlaW5waWN0dXJlXCIsIHRoaXMub25EaXNhYmxlUElQKTtcbiAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndlYmtpdHByZXNlbnRhdGlvbm1vZGVjaGFuZ2VkXCIsIHRoaXMub25QcmVzZW50YXRpb25Nb2RlQ2hhbmdlKTtcbiAgICBpZiAoIXRoaXMuc2hvdWxkVXNlSExTKHVybCkpIHtcbiAgICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2FucGxheVwiLCB0aGlzLm9uUmVhZHkpO1xuICAgIH1cbiAgfVxuICBzaG91bGRVc2VBdWRpbyhwcm9wcykge1xuICAgIGlmIChwcm9wcy5jb25maWcuZm9yY2VWaWRlbykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocHJvcHMuY29uZmlnLmF0dHJpYnV0ZXMucG9zdGVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBpbXBvcnRfcGF0dGVybnMuQVVESU9fRVhURU5TSU9OUy50ZXN0KHByb3BzLnVybCkgfHwgcHJvcHMuY29uZmlnLmZvcmNlQXVkaW87XG4gIH1cbiAgc2hvdWxkVXNlSExTKHVybCkge1xuICAgIGlmIChJU19TQUZBUkkgJiYgdGhpcy5wcm9wcy5jb25maWcuZm9yY2VTYWZhcmlITFMgfHwgdGhpcy5wcm9wcy5jb25maWcuZm9yY2VITFMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoSVNfSU9TIHx8IHRoaXMucHJvcHMuY29uZmlnLmZvcmNlRGlzYWJsZUhscykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gaW1wb3J0X3BhdHRlcm5zLkhMU19FWFRFTlNJT05TLnRlc3QodXJsKSB8fCBNQVRDSF9DTE9VREZMQVJFX1NUUkVBTS50ZXN0KHVybCk7XG4gIH1cbiAgc2hvdWxkVXNlREFTSCh1cmwpIHtcbiAgICByZXR1cm4gaW1wb3J0X3BhdHRlcm5zLkRBU0hfRVhURU5TSU9OUy50ZXN0KHVybCkgfHwgdGhpcy5wcm9wcy5jb25maWcuZm9yY2VEQVNIO1xuICB9XG4gIHNob3VsZFVzZUZMVih1cmwpIHtcbiAgICByZXR1cm4gaW1wb3J0X3BhdHRlcm5zLkZMVl9FWFRFTlNJT05TLnRlc3QodXJsKSB8fCB0aGlzLnByb3BzLmNvbmZpZy5mb3JjZUZMVjtcbiAgfVxuICBsb2FkKHVybCkge1xuICAgIGNvbnN0IHsgaGxzVmVyc2lvbiwgaGxzT3B0aW9ucywgZGFzaFZlcnNpb24sIGZsdlZlcnNpb24gfSA9IHRoaXMucHJvcHMuY29uZmlnO1xuICAgIGlmICh0aGlzLmhscykge1xuICAgICAgdGhpcy5obHMuZGVzdHJveSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5kYXNoKSB7XG4gICAgICB0aGlzLmRhc2gucmVzZXQoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2hvdWxkVXNlSExTKHVybCkpIHtcbiAgICAgICgwLCBpbXBvcnRfdXRpbHMuZ2V0U0RLKShITFNfU0RLX1VSTC5yZXBsYWNlKFwiVkVSU0lPTlwiLCBobHNWZXJzaW9uKSwgSExTX0dMT0JBTCkudGhlbigoSGxzKSA9PiB7XG4gICAgICAgIHRoaXMuaGxzID0gbmV3IEhscyhobHNPcHRpb25zKTtcbiAgICAgICAgdGhpcy5obHMub24oSGxzLkV2ZW50cy5NQU5JRkVTVF9QQVJTRUQsICgpID0+IHtcbiAgICAgICAgICB0aGlzLnByb3BzLm9uUmVhZHkoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaGxzLm9uKEhscy5FdmVudHMuRVJST1IsIChlLCBkYXRhKSA9PiB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbkVycm9yKGUsIGRhdGEsIHRoaXMuaGxzLCBIbHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKE1BVENIX0NMT1VERkxBUkVfU1RSRUFNLnRlc3QodXJsKSkge1xuICAgICAgICAgIGNvbnN0IGlkID0gdXJsLm1hdGNoKE1BVENIX0NMT1VERkxBUkVfU1RSRUFNKVsxXTtcbiAgICAgICAgICB0aGlzLmhscy5sb2FkU291cmNlKFJFUExBQ0VfQ0xPVURGTEFSRV9TVFJFQU0ucmVwbGFjZShcIntpZH1cIiwgaWQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmhscy5sb2FkU291cmNlKHVybCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5obHMuYXR0YWNoTWVkaWEodGhpcy5wbGF5ZXIpO1xuICAgICAgICB0aGlzLnByb3BzLm9uTG9hZGVkKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2hvdWxkVXNlREFTSCh1cmwpKSB7XG4gICAgICAoMCwgaW1wb3J0X3V0aWxzLmdldFNESykoREFTSF9TREtfVVJMLnJlcGxhY2UoXCJWRVJTSU9OXCIsIGRhc2hWZXJzaW9uKSwgREFTSF9HTE9CQUwpLnRoZW4oKGRhc2hqcykgPT4ge1xuICAgICAgICB0aGlzLmRhc2ggPSBkYXNoanMuTWVkaWFQbGF5ZXIoKS5jcmVhdGUoKTtcbiAgICAgICAgdGhpcy5kYXNoLmluaXRpYWxpemUodGhpcy5wbGF5ZXIsIHVybCwgdGhpcy5wcm9wcy5wbGF5aW5nKTtcbiAgICAgICAgdGhpcy5kYXNoLm9uKFwiZXJyb3JcIiwgdGhpcy5wcm9wcy5vbkVycm9yKTtcbiAgICAgICAgaWYgKHBhcnNlSW50KGRhc2hWZXJzaW9uKSA8IDMpIHtcbiAgICAgICAgICB0aGlzLmRhc2guZ2V0RGVidWcoKS5zZXRMb2dUb0Jyb3dzZXJDb25zb2xlKGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRhc2gudXBkYXRlU2V0dGluZ3MoeyBkZWJ1ZzogeyBsb2dMZXZlbDogZGFzaGpzLkRlYnVnLkxPR19MRVZFTF9OT05FIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcm9wcy5vbkxvYWRlZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnNob3VsZFVzZUZMVih1cmwpKSB7XG4gICAgICAoMCwgaW1wb3J0X3V0aWxzLmdldFNESykoRkxWX1NES19VUkwucmVwbGFjZShcIlZFUlNJT05cIiwgZmx2VmVyc2lvbiksIEZMVl9HTE9CQUwpLnRoZW4oKGZsdmpzKSA9PiB7XG4gICAgICAgIHRoaXMuZmx2ID0gZmx2anMuY3JlYXRlUGxheWVyKHsgdHlwZTogXCJmbHZcIiwgdXJsIH0pO1xuICAgICAgICB0aGlzLmZsdi5hdHRhY2hNZWRpYUVsZW1lbnQodGhpcy5wbGF5ZXIpO1xuICAgICAgICB0aGlzLmZsdi5vbihmbHZqcy5FdmVudHMuRVJST1IsIChlLCBkYXRhKSA9PiB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbkVycm9yKGUsIGRhdGEsIHRoaXMuZmx2LCBmbHZqcyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmZsdi5sb2FkKCk7XG4gICAgICAgIHRoaXMucHJvcHMub25Mb2FkZWQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodXJsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHRoaXMucGxheWVyLmxvYWQoKTtcbiAgICB9IGVsc2UgaWYgKCgwLCBpbXBvcnRfdXRpbHMuaXNNZWRpYVN0cmVhbSkodXJsKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc3JjT2JqZWN0ID0gdXJsO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aGlzLnBsYXllci5zcmMgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTCh1cmwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwbGF5KCkge1xuICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnBsYXllci5wbGF5KCk7XG4gICAgaWYgKHByb21pc2UpIHtcbiAgICAgIHByb21pc2UuY2F0Y2godGhpcy5wcm9wcy5vbkVycm9yKTtcbiAgICB9XG4gIH1cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy5wbGF5ZXIucGF1c2UoKTtcbiAgfVxuICBzdG9wKCkge1xuICAgIHRoaXMucGxheWVyLnJlbW92ZUF0dHJpYnV0ZShcInNyY1wiKTtcbiAgICBpZiAodGhpcy5kYXNoKSB7XG4gICAgICB0aGlzLmRhc2gucmVzZXQoKTtcbiAgICB9XG4gIH1cbiAgc2Vla1RvKHNlY29uZHMsIGtlZXBQbGF5aW5nID0gdHJ1ZSkge1xuICAgIHRoaXMucGxheWVyLmN1cnJlbnRUaW1lID0gc2Vjb25kcztcbiAgICBpZiAoIWtlZXBQbGF5aW5nKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuICB9XG4gIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgIHRoaXMucGxheWVyLnZvbHVtZSA9IGZyYWN0aW9uO1xuICB9XG4gIGVuYWJsZVBJUCgpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXIucmVxdWVzdFBpY3R1cmVJblBpY3R1cmUgJiYgZG9jdW1lbnQucGljdHVyZUluUGljdHVyZUVsZW1lbnQgIT09IHRoaXMucGxheWVyKSB7XG4gICAgICB0aGlzLnBsYXllci5yZXF1ZXN0UGljdHVyZUluUGljdHVyZSgpO1xuICAgIH0gZWxzZSBpZiAoKDAsIGltcG9ydF91dGlscy5zdXBwb3J0c1dlYktpdFByZXNlbnRhdGlvbk1vZGUpKHRoaXMucGxheWVyKSAmJiB0aGlzLnBsYXllci53ZWJraXRQcmVzZW50YXRpb25Nb2RlICE9PSBcInBpY3R1cmUtaW4tcGljdHVyZVwiKSB7XG4gICAgICB0aGlzLnBsYXllci53ZWJraXRTZXRQcmVzZW50YXRpb25Nb2RlKFwicGljdHVyZS1pbi1waWN0dXJlXCIpO1xuICAgIH1cbiAgfVxuICBkaXNhYmxlUElQKCkge1xuICAgIGlmIChkb2N1bWVudC5leGl0UGljdHVyZUluUGljdHVyZSAmJiBkb2N1bWVudC5waWN0dXJlSW5QaWN0dXJlRWxlbWVudCA9PT0gdGhpcy5wbGF5ZXIpIHtcbiAgICAgIGRvY3VtZW50LmV4aXRQaWN0dXJlSW5QaWN0dXJlKCk7XG4gICAgfSBlbHNlIGlmICgoMCwgaW1wb3J0X3V0aWxzLnN1cHBvcnRzV2ViS2l0UHJlc2VudGF0aW9uTW9kZSkodGhpcy5wbGF5ZXIpICYmIHRoaXMucGxheWVyLndlYmtpdFByZXNlbnRhdGlvbk1vZGUgIT09IFwiaW5saW5lXCIpIHtcbiAgICAgIHRoaXMucGxheWVyLndlYmtpdFNldFByZXNlbnRhdGlvbk1vZGUoXCJpbmxpbmVcIik7XG4gICAgfVxuICB9XG4gIHNldFBsYXliYWNrUmF0ZShyYXRlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMucGxheWVyLnBsYXliYWNrUmF0ZSA9IHJhdGU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMucHJvcHMub25FcnJvcihlcnJvcik7XG4gICAgfVxuICB9XG4gIGdldER1cmF0aW9uKCkge1xuICAgIGlmICghdGhpcy5wbGF5ZXIpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCB7IGR1cmF0aW9uLCBzZWVrYWJsZSB9ID0gdGhpcy5wbGF5ZXI7XG4gICAgaWYgKGR1cmF0aW9uID09PSBJbmZpbml0eSAmJiBzZWVrYWJsZS5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gc2Vla2FibGUuZW5kKHNlZWthYmxlLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gZHVyYXRpb247XG4gIH1cbiAgZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgaWYgKCF0aGlzLnBsYXllcilcbiAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiB0aGlzLnBsYXllci5jdXJyZW50VGltZTtcbiAgfVxuICBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgIGlmICghdGhpcy5wbGF5ZXIpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCB7IGJ1ZmZlcmVkIH0gPSB0aGlzLnBsYXllcjtcbiAgICBpZiAoYnVmZmVyZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgZW5kID0gYnVmZmVyZWQuZW5kKGJ1ZmZlcmVkLmxlbmd0aCAtIDEpO1xuICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5nZXREdXJhdGlvbigpO1xuICAgIGlmIChlbmQgPiBkdXJhdGlvbikge1xuICAgICAgcmV0dXJuIGR1cmF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gZW5kO1xuICB9XG4gIGdldFNvdXJjZSh1cmwpIHtcbiAgICBjb25zdCB1c2VITFMgPSB0aGlzLnNob3VsZFVzZUhMUyh1cmwpO1xuICAgIGNvbnN0IHVzZURBU0ggPSB0aGlzLnNob3VsZFVzZURBU0godXJsKTtcbiAgICBjb25zdCB1c2VGTFYgPSB0aGlzLnNob3VsZFVzZUZMVih1cmwpO1xuICAgIGlmICh1cmwgaW5zdGFuY2VvZiBBcnJheSB8fCAoMCwgaW1wb3J0X3V0aWxzLmlzTWVkaWFTdHJlYW0pKHVybCkgfHwgdXNlSExTIHx8IHVzZURBU0ggfHwgdXNlRkxWKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoTUFUQ0hfRFJPUEJPWF9VUkwudGVzdCh1cmwpKSB7XG4gICAgICByZXR1cm4gdXJsLnJlcGxhY2UoXCJ3d3cuZHJvcGJveC5jb21cIiwgXCJkbC5kcm9wYm94dXNlcmNvbnRlbnQuY29tXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHVybCwgcGxheWluZywgbG9vcCwgY29udHJvbHMsIG11dGVkLCBjb25maWcsIHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdXNlQXVkaW8gPSB0aGlzLnNob3VsZFVzZUF1ZGlvKHRoaXMucHJvcHMpO1xuICAgIGNvbnN0IEVsZW1lbnQgPSB1c2VBdWRpbyA/IFwiYXVkaW9cIiA6IFwidmlkZW9cIjtcbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIHdpZHRoOiB3aWR0aCA9PT0gXCJhdXRvXCIgPyB3aWR0aCA6IFwiMTAwJVwiLFxuICAgICAgaGVpZ2h0OiBoZWlnaHQgPT09IFwiYXV0b1wiID8gaGVpZ2h0IDogXCIxMDAlXCJcbiAgICB9O1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gaW1wb3J0X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgIEVsZW1lbnQsXG4gICAgICB7XG4gICAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICAgIHNyYzogdGhpcy5nZXRTb3VyY2UodXJsKSxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIHByZWxvYWQ6IFwiYXV0b1wiLFxuICAgICAgICBhdXRvUGxheTogcGxheWluZyB8fCB2b2lkIDAsXG4gICAgICAgIGNvbnRyb2xzLFxuICAgICAgICBtdXRlZCxcbiAgICAgICAgbG9vcCxcbiAgICAgICAgLi4uY29uZmlnLmF0dHJpYnV0ZXNcbiAgICAgIH0sXG4gICAgICB1cmwgaW5zdGFuY2VvZiBBcnJheSAmJiB1cmwubWFwKHRoaXMucmVuZGVyU291cmNlRWxlbWVudCksXG4gICAgICBjb25maWcudHJhY2tzLm1hcCh0aGlzLnJlbmRlclRyYWNrKVxuICAgICk7XG4gIH1cbn1cbl9fcHVibGljRmllbGQoRmlsZVBsYXllciwgXCJkaXNwbGF5TmFtZVwiLCBcIkZpbGVQbGF5ZXJcIik7XG5fX3B1YmxpY0ZpZWxkKEZpbGVQbGF5ZXIsIFwiY2FuUGxheVwiLCBpbXBvcnRfcGF0dGVybnMuY2FuUGxheS5maWxlKTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZSIsIk9iamVjdCIsImNyZWF0ZSIsIl9fZGVmUHJvcCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9fZ2V0UHJvdG9PZiIsImdldFByb3RvdHlwZU9mIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImdldCIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImNhbGwiLCJfX3RvRVNNIiwibW9kIiwiaXNOb2RlTW9kZSIsIl9fZXNNb2R1bGUiLCJfX3RvQ29tbW9uSlMiLCJfX3B1YmxpY0ZpZWxkIiwiRmlsZVBsYXllcl9leHBvcnRzIiwiZGVmYXVsdCIsIkZpbGVQbGF5ZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1wb3J0X3JlYWN0IiwicmVxdWlyZSIsImltcG9ydF91dGlscyIsImltcG9ydF9wYXR0ZXJucyIsIkhBU19OQVZJR0FUT1IiLCJuYXZpZ2F0b3IiLCJJU19JUEFEX1BSTyIsInBsYXRmb3JtIiwibWF4VG91Y2hQb2ludHMiLCJJU19JT1MiLCJ0ZXN0IiwidXNlckFnZW50Iiwid2luZG93IiwiTVNTdHJlYW0iLCJJU19TQUZBUkkiLCJITFNfU0RLX1VSTCIsIkhMU19HTE9CQUwiLCJEQVNIX1NES19VUkwiLCJEQVNIX0dMT0JBTCIsIkZMVl9TREtfVVJMIiwiRkxWX0dMT0JBTCIsIk1BVENIX0RST1BCT1hfVVJMIiwiTUFUQ0hfQ0xPVURGTEFSRV9TVFJFQU0iLCJSRVBMQUNFX0NMT1VERkxBUkVfU1RSRUFNIiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJhcmdzIiwicHJvcHMiLCJvblJlYWR5Iiwib25QbGF5Iiwib25CdWZmZXIiLCJvbkJ1ZmZlckVuZCIsIm9uUGF1c2UiLCJvbkVuZGVkIiwib25FcnJvciIsImV2ZW50Iiwib25QbGF5YmFja1JhdGVDaGFuZ2UiLCJwbGF5YmFja1JhdGUiLCJvbkVuYWJsZVBJUCIsImUiLCJvbkRpc2FibGVQSVAiLCJwbGF5aW5nIiwicGxheSIsInBsYXllciIsInN1cHBvcnRzV2ViS2l0UHJlc2VudGF0aW9uTW9kZSIsIndlYmtpdFByZXNlbnRhdGlvbk1vZGUiLCJvblNlZWsiLCJjdXJyZW50VGltZSIsIm11dGVkIiwic291cmNlIiwiaW5kZXgiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwidHJhY2siLCJwcmV2UGxheWVyIiwiY29tcG9uZW50RGlkTW91bnQiLCJvbk1vdW50IiwiYWRkTGlzdGVuZXJzIiwiZ2V0U291cmNlIiwidXJsIiwiY29uZmlnIiwiZm9yY2VEaXNhYmxlSGxzIiwibG9hZCIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsInNob3VsZFVzZUF1ZGlvIiwicmVtb3ZlTGlzdGVuZXJzIiwiaXNNZWRpYVN0cmVhbSIsIkFycmF5Iiwic3JjT2JqZWN0IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJobHMiLCJkZXN0cm95IiwicGxheXNpbmxpbmUiLCJhZGRFdmVudExpc3RlbmVyIiwib25QbGF5QmFja1JhdGVDaGFuZ2UiLCJvblByZXNlbnRhdGlvbk1vZGVDaGFuZ2UiLCJzaG91bGRVc2VITFMiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZm9yY2VWaWRlbyIsImF0dHJpYnV0ZXMiLCJwb3N0ZXIiLCJBVURJT19FWFRFTlNJT05TIiwiZm9yY2VBdWRpbyIsImZvcmNlU2FmYXJpSExTIiwiZm9yY2VITFMiLCJITFNfRVhURU5TSU9OUyIsInNob3VsZFVzZURBU0giLCJEQVNIX0VYVEVOU0lPTlMiLCJmb3JjZURBU0giLCJzaG91bGRVc2VGTFYiLCJGTFZfRVhURU5TSU9OUyIsImZvcmNlRkxWIiwiaGxzVmVyc2lvbiIsImhsc09wdGlvbnMiLCJkYXNoVmVyc2lvbiIsImZsdlZlcnNpb24iLCJkYXNoIiwicmVzZXQiLCJnZXRTREsiLCJyZXBsYWNlIiwidGhlbiIsIkhscyIsIm9uIiwiRXZlbnRzIiwiTUFOSUZFU1RfUEFSU0VEIiwiRVJST1IiLCJkYXRhIiwiaWQiLCJtYXRjaCIsImxvYWRTb3VyY2UiLCJhdHRhY2hNZWRpYSIsIm9uTG9hZGVkIiwiZGFzaGpzIiwiTWVkaWFQbGF5ZXIiLCJpbml0aWFsaXplIiwicGFyc2VJbnQiLCJnZXREZWJ1ZyIsInNldExvZ1RvQnJvd3NlckNvbnNvbGUiLCJ1cGRhdGVTZXR0aW5ncyIsImRlYnVnIiwibG9nTGV2ZWwiLCJEZWJ1ZyIsIkxPR19MRVZFTF9OT05FIiwiZmx2anMiLCJmbHYiLCJjcmVhdGVQbGF5ZXIiLCJ0eXBlIiwiYXR0YWNoTWVkaWFFbGVtZW50IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicHJvbWlzZSIsImNhdGNoIiwicGF1c2UiLCJzdG9wIiwic2Vla1RvIiwic2Vjb25kcyIsImtlZXBQbGF5aW5nIiwic2V0Vm9sdW1lIiwiZnJhY3Rpb24iLCJ2b2x1bWUiLCJlbmFibGVQSVAiLCJyZXF1ZXN0UGljdHVyZUluUGljdHVyZSIsImRvY3VtZW50IiwicGljdHVyZUluUGljdHVyZUVsZW1lbnQiLCJ3ZWJraXRTZXRQcmVzZW50YXRpb25Nb2RlIiwiZGlzYWJsZVBJUCIsImV4aXRQaWN0dXJlSW5QaWN0dXJlIiwic2V0UGxheWJhY2tSYXRlIiwicmF0ZSIsImVycm9yIiwiZ2V0RHVyYXRpb24iLCJkdXJhdGlvbiIsInNlZWthYmxlIiwiSW5maW5pdHkiLCJsZW5ndGgiLCJlbmQiLCJnZXRDdXJyZW50VGltZSIsImdldFNlY29uZHNMb2FkZWQiLCJidWZmZXJlZCIsInVzZUhMUyIsInVzZURBU0giLCJ1c2VGTFYiLCJyZW5kZXIiLCJsb29wIiwiY29udHJvbHMiLCJ3aWR0aCIsImhlaWdodCIsInVzZUF1ZGlvIiwiRWxlbWVudCIsInN0eWxlIiwicmVmIiwicHJlbG9hZCIsImF1dG9QbGF5IiwibWFwIiwicmVuZGVyU291cmNlRWxlbWVudCIsInRyYWNrcyIsInJlbmRlclRyYWNrIiwiY2FuUGxheSIsImZpbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/FilePlayer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Kaltura.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Kaltura.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Kaltura_exports = {};\n__export(Kaltura_exports, {\n    default: ()=>Kaltura\n});\nmodule.exports = __toCommonJS(Kaltura_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://cdn.embed.ly/player-0.1.0.min.js\";\nconst SDK_GLOBAL = \"playerjs\";\nclass Kaltura extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"duration\", null);\n        __publicField(this, \"currentTime\", null);\n        __publicField(this, \"secondsLoaded\", null);\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"mute\");\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"unmute\");\n        });\n        __publicField(this, \"ref\", (iframe)=>{\n            this.iframe = iframe;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((playerjs)=>{\n            if (!this.iframe) return;\n            this.player = new playerjs.Player(this.iframe);\n            this.player.on(\"ready\", ()=>{\n                setTimeout(()=>{\n                    this.player.isReady = true;\n                    this.player.setLoop(this.props.loop);\n                    if (this.props.muted) {\n                        this.player.mute();\n                    }\n                    this.addListeners(this.player, this.props);\n                    this.props.onReady();\n                }, 500);\n            });\n        }, this.props.onError);\n    }\n    addListeners(player, props) {\n        player.on(\"play\", props.onPlay);\n        player.on(\"pause\", props.onPause);\n        player.on(\"ended\", props.onEnded);\n        player.on(\"error\", props.onError);\n        player.on(\"timeupdate\", ({ duration, seconds })=>{\n            this.duration = duration;\n            this.currentTime = seconds;\n        });\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {}\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"setCurrentTime\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    setLoop(loop) {\n        this.callPlayer(\"setLoop\", loop);\n    }\n    getDuration() {\n        return this.duration;\n    }\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    getSecondsLoaded() {\n        return this.secondsLoaded;\n    }\n    render() {\n        const style = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"iframe\", {\n            ref: this.ref,\n            src: this.props.url,\n            frameBorder: \"0\",\n            scrolling: \"no\",\n            style,\n            allow: \"encrypted-media; autoplay; fullscreen;\",\n            referrerPolicy: \"no-referrer-when-downgrade\"\n        });\n    }\n}\n__publicField(Kaltura, \"displayName\", \"Kaltura\");\n__publicField(Kaltura, \"canPlay\", import_patterns.canPlay.kaltura);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Kaltura.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Mixcloud.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Mixcloud.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Mixcloud_exports = {};\n__export(Mixcloud_exports, {\n    default: ()=>Mixcloud\n});\nmodule.exports = __toCommonJS(Mixcloud_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://widget.mixcloud.com/media/js/widgetApi.js\";\nconst SDK_GLOBAL = \"Mixcloud\";\nclass Mixcloud extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"duration\", null);\n        __publicField(this, \"currentTime\", null);\n        __publicField(this, \"secondsLoaded\", null);\n        __publicField(this, \"mute\", ()=>{});\n        __publicField(this, \"unmute\", ()=>{});\n        __publicField(this, \"ref\", (iframe)=>{\n            this.iframe = iframe;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((Mixcloud2)=>{\n            this.player = Mixcloud2.PlayerWidget(this.iframe);\n            this.player.ready.then(()=>{\n                this.player.events.play.on(this.props.onPlay);\n                this.player.events.pause.on(this.props.onPause);\n                this.player.events.ended.on(this.props.onEnded);\n                this.player.events.error.on(this.props.error);\n                this.player.events.progress.on((seconds, duration)=>{\n                    this.currentTime = seconds;\n                    this.duration = duration;\n                });\n                this.props.onReady();\n            });\n        }, this.props.onError);\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {}\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"seek\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {}\n    getDuration() {\n        return this.duration;\n    }\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    getSecondsLoaded() {\n        return null;\n    }\n    render() {\n        const { url, config } = this.props;\n        const id = url.match(import_patterns.MATCH_URL_MIXCLOUD)[1];\n        const style = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n        const query = (0, import_utils.queryString)({\n            ...config.options,\n            feed: `/${id}/`\n        });\n        return /* @__PURE__ */ import_react.default.createElement(\"iframe\", {\n            key: id,\n            ref: this.ref,\n            style,\n            src: `https://www.mixcloud.com/widget/iframe/?${query}`,\n            frameBorder: \"0\",\n            allow: \"autoplay\"\n        });\n    }\n}\n__publicField(Mixcloud, \"displayName\", \"Mixcloud\");\n__publicField(Mixcloud, \"canPlay\", import_patterns.canPlay.mixcloud);\n__publicField(Mixcloud, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Mixcloud.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/SoundCloud.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/SoundCloud.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar SoundCloud_exports = {};\n__export(SoundCloud_exports, {\n    default: ()=>SoundCloud\n});\nmodule.exports = __toCommonJS(SoundCloud_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://w.soundcloud.com/player/api.js\";\nconst SDK_GLOBAL = \"SC\";\nclass SoundCloud extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"duration\", null);\n        __publicField(this, \"currentTime\", null);\n        __publicField(this, \"fractionLoaded\", null);\n        __publicField(this, \"mute\", ()=>{\n            this.setVolume(0);\n        });\n        __publicField(this, \"unmute\", ()=>{\n            if (this.props.volume !== null) {\n                this.setVolume(this.props.volume);\n            }\n        });\n        __publicField(this, \"ref\", (iframe)=>{\n            this.iframe = iframe;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url, isReady) {\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((SC)=>{\n            if (!this.iframe) return;\n            const { PLAY, PLAY_PROGRESS, PAUSE, FINISH, ERROR } = SC.Widget.Events;\n            if (!isReady) {\n                this.player = SC.Widget(this.iframe);\n                this.player.bind(PLAY, this.props.onPlay);\n                this.player.bind(PAUSE, ()=>{\n                    const remaining = this.duration - this.currentTime;\n                    if (remaining < 0.05) {\n                        return;\n                    }\n                    this.props.onPause();\n                });\n                this.player.bind(PLAY_PROGRESS, (e)=>{\n                    this.currentTime = e.currentPosition / 1e3;\n                    this.fractionLoaded = e.loadedProgress;\n                });\n                this.player.bind(FINISH, ()=>this.props.onEnded());\n                this.player.bind(ERROR, (e)=>this.props.onError(e));\n            }\n            this.player.load(url, {\n                ...this.props.config.options,\n                callback: ()=>{\n                    this.player.getDuration((duration)=>{\n                        this.duration = duration / 1e3;\n                        this.props.onReady();\n                    });\n                }\n            });\n        });\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {}\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"seekTo\", seconds * 1e3);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction * 100);\n    }\n    getDuration() {\n        return this.duration;\n    }\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    getSecondsLoaded() {\n        return this.fractionLoaded * this.duration;\n    }\n    render() {\n        const { display } = this.props;\n        const style = {\n            width: \"100%\",\n            height: \"100%\",\n            display\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"iframe\", {\n            ref: this.ref,\n            src: `https://w.soundcloud.com/player/?url=${encodeURIComponent(this.props.url)}`,\n            style,\n            frameBorder: 0,\n            allow: \"autoplay\"\n        });\n    }\n}\n__publicField(SoundCloud, \"displayName\", \"SoundCloud\");\n__publicField(SoundCloud, \"canPlay\", import_patterns.canPlay.soundcloud);\n__publicField(SoundCloud, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/SoundCloud.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Streamable.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/Streamable.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Streamable_exports = {};\n__export(Streamable_exports, {\n    default: ()=>Streamable\n});\nmodule.exports = __toCommonJS(Streamable_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://cdn.embed.ly/player-0.1.0.min.js\";\nconst SDK_GLOBAL = \"playerjs\";\nclass Streamable extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"duration\", null);\n        __publicField(this, \"currentTime\", null);\n        __publicField(this, \"secondsLoaded\", null);\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"mute\");\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"unmute\");\n        });\n        __publicField(this, \"ref\", (iframe)=>{\n            this.iframe = iframe;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((playerjs)=>{\n            if (!this.iframe) return;\n            this.player = new playerjs.Player(this.iframe);\n            this.player.setLoop(this.props.loop);\n            this.player.on(\"ready\", this.props.onReady);\n            this.player.on(\"play\", this.props.onPlay);\n            this.player.on(\"pause\", this.props.onPause);\n            this.player.on(\"seeked\", this.props.onSeek);\n            this.player.on(\"ended\", this.props.onEnded);\n            this.player.on(\"error\", this.props.onError);\n            this.player.on(\"timeupdate\", ({ duration, seconds })=>{\n                this.duration = duration;\n                this.currentTime = seconds;\n            });\n            this.player.on(\"buffered\", ({ percent })=>{\n                if (this.duration) {\n                    this.secondsLoaded = this.duration * percent;\n                }\n            });\n            if (this.props.muted) {\n                this.player.mute();\n            }\n        }, this.props.onError);\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {}\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"setCurrentTime\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction * 100);\n    }\n    setLoop(loop) {\n        this.callPlayer(\"setLoop\", loop);\n    }\n    getDuration() {\n        return this.duration;\n    }\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    getSecondsLoaded() {\n        return this.secondsLoaded;\n    }\n    render() {\n        const id = this.props.url.match(import_patterns.MATCH_URL_STREAMABLE)[1];\n        const style = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"iframe\", {\n            ref: this.ref,\n            src: `https://streamable.com/o/${id}`,\n            frameBorder: \"0\",\n            scrolling: \"no\",\n            style,\n            allow: \"encrypted-media; autoplay; fullscreen;\"\n        });\n    }\n}\n__publicField(Streamable, \"displayName\", \"Streamable\");\n__publicField(Streamable, \"canPlay\", import_patterns.canPlay.streamable);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Streamable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Twitch.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Twitch.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Twitch_exports = {};\n__export(Twitch_exports, {\n    default: ()=>Twitch\n});\nmodule.exports = __toCommonJS(Twitch_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://player.twitch.tv/js/embed/v1.js\";\nconst SDK_GLOBAL = \"Twitch\";\nconst PLAYER_ID_PREFIX = \"twitch-player-\";\nclass Twitch extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"playerID\", this.props.config.playerId || `${PLAYER_ID_PREFIX}${(0, import_utils.randomString)()}`);\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"setMuted\", true);\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"setMuted\", false);\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url, isReady) {\n        const { playsinline, onError, config, controls } = this.props;\n        const isChannel = import_patterns.MATCH_URL_TWITCH_CHANNEL.test(url);\n        const id = isChannel ? url.match(import_patterns.MATCH_URL_TWITCH_CHANNEL)[1] : url.match(import_patterns.MATCH_URL_TWITCH_VIDEO)[1];\n        if (isReady) {\n            if (isChannel) {\n                this.player.setChannel(id);\n            } else {\n                this.player.setVideo(\"v\" + id);\n            }\n            return;\n        }\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((Twitch2)=>{\n            this.player = new Twitch2.Player(this.playerID, {\n                video: isChannel ? \"\" : id,\n                channel: isChannel ? id : \"\",\n                height: \"100%\",\n                width: \"100%\",\n                playsinline,\n                autoplay: this.props.playing,\n                muted: this.props.muted,\n                // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859\n                controls: isChannel ? true : controls,\n                time: (0, import_utils.parseStartTime)(url),\n                ...config.options\n            });\n            const { READY, PLAYING, PAUSE, ENDED, ONLINE, OFFLINE, SEEK } = Twitch2.Player;\n            this.player.addEventListener(READY, this.props.onReady);\n            this.player.addEventListener(PLAYING, this.props.onPlay);\n            this.player.addEventListener(PAUSE, this.props.onPause);\n            this.player.addEventListener(ENDED, this.props.onEnded);\n            this.player.addEventListener(SEEK, this.props.onSeek);\n            this.player.addEventListener(ONLINE, this.props.onLoaded);\n            this.player.addEventListener(OFFLINE, this.props.onLoaded);\n        }, onError);\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {\n        this.callPlayer(\"pause\");\n    }\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"seek\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    getDuration() {\n        return this.callPlayer(\"getDuration\");\n    }\n    getCurrentTime() {\n        return this.callPlayer(\"getCurrentTime\");\n    }\n    getSecondsLoaded() {\n        return null;\n    }\n    render() {\n        const style = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style,\n            id: this.playerID\n        });\n    }\n}\n__publicField(Twitch, \"displayName\", \"Twitch\");\n__publicField(Twitch, \"canPlay\", import_patterns.canPlay.twitch);\n__publicField(Twitch, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Twitch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Vidyard.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Vidyard.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Vidyard_exports = {};\n__export(Vidyard_exports, {\n    default: ()=>Vidyard\n});\nmodule.exports = __toCommonJS(Vidyard_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://play.vidyard.com/embed/v4.js\";\nconst SDK_GLOBAL = \"VidyardV4\";\nconst SDK_GLOBAL_READY = \"onVidyardAPI\";\nclass Vidyard extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"mute\", ()=>{\n            this.setVolume(0);\n        });\n        __publicField(this, \"unmute\", ()=>{\n            if (this.props.volume !== null) {\n                this.setVolume(this.props.volume);\n            }\n        });\n        __publicField(this, \"ref\", (container)=>{\n            this.container = container;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        const { playing, config, onError, onDuration } = this.props;\n        const id = url && url.match(import_patterns.MATCH_URL_VIDYARD)[1];\n        if (this.player) {\n            this.stop();\n        }\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then((Vidyard2)=>{\n            if (!this.container) return;\n            Vidyard2.api.addReadyListener((data, player)=>{\n                if (this.player) {\n                    return;\n                }\n                this.player = player;\n                this.player.on(\"ready\", this.props.onReady);\n                this.player.on(\"play\", this.props.onPlay);\n                this.player.on(\"pause\", this.props.onPause);\n                this.player.on(\"seek\", this.props.onSeek);\n                this.player.on(\"playerComplete\", this.props.onEnded);\n            }, id);\n            Vidyard2.api.renderPlayer({\n                uuid: id,\n                container: this.container,\n                autoplay: playing ? 1 : 0,\n                ...config.options\n            });\n            Vidyard2.api.getPlayerMetadata(id).then((meta)=>{\n                this.duration = meta.length_in_seconds;\n                onDuration(meta.length_in_seconds);\n            });\n        }, onError);\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {\n        window.VidyardV4.api.destroyPlayer(this.player);\n    }\n    seekTo(amount, keepPlaying = true) {\n        this.callPlayer(\"seek\", amount);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    setPlaybackRate(rate) {\n        this.callPlayer(\"setPlaybackSpeed\", rate);\n    }\n    getDuration() {\n        return this.duration;\n    }\n    getCurrentTime() {\n        return this.callPlayer(\"currentTime\");\n    }\n    getSecondsLoaded() {\n        return null;\n    }\n    render() {\n        const { display } = this.props;\n        const style = {\n            width: \"100%\",\n            height: \"100%\",\n            display\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style\n        }, /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            ref: this.ref\n        }));\n    }\n}\n__publicField(Vidyard, \"displayName\", \"Vidyard\");\n__publicField(Vidyard, \"canPlay\", import_patterns.canPlay.vidyard);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Vidyard.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Vimeo.js":
/*!********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Vimeo.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Vimeo_exports = {};\n__export(Vimeo_exports, {\n    default: ()=>Vimeo\n});\nmodule.exports = __toCommonJS(Vimeo_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://player.vimeo.com/api/player.js\";\nconst SDK_GLOBAL = \"Vimeo\";\nconst cleanUrl = (url)=>{\n    return url.replace(\"/manage/videos\", \"\");\n};\nclass Vimeo extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        // Prevent checking isLoading when URL changes\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"duration\", null);\n        __publicField(this, \"currentTime\", null);\n        __publicField(this, \"secondsLoaded\", null);\n        __publicField(this, \"mute\", ()=>{\n            this.setMuted(true);\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.setMuted(false);\n        });\n        __publicField(this, \"ref\", (container)=>{\n            this.container = container;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        this.duration = null;\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((Vimeo2)=>{\n            if (!this.container) return;\n            const { playerOptions, title } = this.props.config;\n            this.player = new Vimeo2.Player(this.container, {\n                url: cleanUrl(url),\n                autoplay: this.props.playing,\n                muted: this.props.muted,\n                loop: this.props.loop,\n                playsinline: this.props.playsinline,\n                controls: this.props.controls,\n                ...playerOptions\n            });\n            this.player.ready().then(()=>{\n                const iframe = this.container.querySelector(\"iframe\");\n                iframe.style.width = \"100%\";\n                iframe.style.height = \"100%\";\n                if (title) {\n                    iframe.title = title;\n                }\n            }).catch(this.props.onError);\n            this.player.on(\"loaded\", ()=>{\n                this.props.onReady();\n                this.refreshDuration();\n            });\n            this.player.on(\"play\", ()=>{\n                this.props.onPlay();\n                this.refreshDuration();\n            });\n            this.player.on(\"pause\", this.props.onPause);\n            this.player.on(\"seeked\", (e)=>this.props.onSeek(e.seconds));\n            this.player.on(\"ended\", this.props.onEnded);\n            this.player.on(\"error\", this.props.onError);\n            this.player.on(\"timeupdate\", ({ seconds })=>{\n                this.currentTime = seconds;\n            });\n            this.player.on(\"progress\", ({ seconds })=>{\n                this.secondsLoaded = seconds;\n            });\n            this.player.on(\"bufferstart\", this.props.onBuffer);\n            this.player.on(\"bufferend\", this.props.onBufferEnd);\n            this.player.on(\"playbackratechange\", (e)=>this.props.onPlaybackRateChange(e.playbackRate));\n        }, this.props.onError);\n    }\n    refreshDuration() {\n        this.player.getDuration().then((duration)=>{\n            this.duration = duration;\n        });\n    }\n    play() {\n        const promise = this.callPlayer(\"play\");\n        if (promise) {\n            promise.catch(this.props.onError);\n        }\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {\n        this.callPlayer(\"unload\");\n    }\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"setCurrentTime\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    setMuted(muted) {\n        this.callPlayer(\"setMuted\", muted);\n    }\n    setLoop(loop) {\n        this.callPlayer(\"setLoop\", loop);\n    }\n    setPlaybackRate(rate) {\n        this.callPlayer(\"setPlaybackRate\", rate);\n    }\n    getDuration() {\n        return this.duration;\n    }\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    getSecondsLoaded() {\n        return this.secondsLoaded;\n    }\n    render() {\n        const { display } = this.props;\n        const style = {\n            width: \"100%\",\n            height: \"100%\",\n            overflow: \"hidden\",\n            display\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            key: this.props.url,\n            ref: this.ref,\n            style\n        });\n    }\n}\n__publicField(Vimeo, \"displayName\", \"Vimeo\");\n__publicField(Vimeo, \"canPlay\", import_patterns.canPlay.vimeo);\n__publicField(Vimeo, \"forceLoad\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Vimeo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Wistia.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Wistia.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Wistia_exports = {};\n__export(Wistia_exports, {\n    default: ()=>Wistia\n});\nmodule.exports = __toCommonJS(Wistia_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://fast.wistia.com/assets/external/E-v1.js\";\nconst SDK_GLOBAL = \"Wistia\";\nconst PLAYER_ID_PREFIX = \"wistia-player-\";\nclass Wistia extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"playerID\", this.props.config.playerId || `${PLAYER_ID_PREFIX}${(0, import_utils.randomString)()}`);\n        // Proxy methods to prevent listener leaks\n        __publicField(this, \"onPlay\", (...args)=>this.props.onPlay(...args));\n        __publicField(this, \"onPause\", (...args)=>this.props.onPause(...args));\n        __publicField(this, \"onSeek\", (...args)=>this.props.onSeek(...args));\n        __publicField(this, \"onEnded\", (...args)=>this.props.onEnded(...args));\n        __publicField(this, \"onPlaybackRateChange\", (...args)=>this.props.onPlaybackRateChange(...args));\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"mute\");\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"unmute\");\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        const { playing, muted, controls, onReady, config, onError } = this.props;\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((Wistia2)=>{\n            if (config.customControls) {\n                config.customControls.forEach((control)=>Wistia2.defineControl(control));\n            }\n            window._wq = window._wq || [];\n            window._wq.push({\n                id: this.playerID,\n                options: {\n                    autoPlay: playing,\n                    silentAutoPlay: \"allow\",\n                    muted,\n                    controlsVisibleOnLoad: controls,\n                    fullscreenButton: controls,\n                    playbar: controls,\n                    playbackRateControl: controls,\n                    qualityControl: controls,\n                    volumeControl: controls,\n                    settingsControl: controls,\n                    smallPlayButton: controls,\n                    ...config.options\n                },\n                onReady: (player)=>{\n                    this.player = player;\n                    this.unbind();\n                    this.player.bind(\"play\", this.onPlay);\n                    this.player.bind(\"pause\", this.onPause);\n                    this.player.bind(\"seek\", this.onSeek);\n                    this.player.bind(\"end\", this.onEnded);\n                    this.player.bind(\"playbackratechange\", this.onPlaybackRateChange);\n                    onReady();\n                }\n            });\n        }, onError);\n    }\n    unbind() {\n        this.player.unbind(\"play\", this.onPlay);\n        this.player.unbind(\"pause\", this.onPause);\n        this.player.unbind(\"seek\", this.onSeek);\n        this.player.unbind(\"end\", this.onEnded);\n        this.player.unbind(\"playbackratechange\", this.onPlaybackRateChange);\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {\n        this.unbind();\n        this.callPlayer(\"remove\");\n    }\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"time\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"volume\", fraction);\n    }\n    setPlaybackRate(rate) {\n        this.callPlayer(\"playbackRate\", rate);\n    }\n    getDuration() {\n        return this.callPlayer(\"duration\");\n    }\n    getCurrentTime() {\n        return this.callPlayer(\"time\");\n    }\n    getSecondsLoaded() {\n        return null;\n    }\n    render() {\n        const { url } = this.props;\n        const videoID = url && url.match(import_patterns.MATCH_URL_WISTIA)[1];\n        const className = `wistia_embed wistia_async_${videoID}`;\n        const style = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            id: this.playerID,\n            key: videoID,\n            className,\n            style\n        });\n    }\n}\n__publicField(Wistia, \"displayName\", \"Wistia\");\n__publicField(Wistia, \"canPlay\", import_patterns.canPlay.wistia);\n__publicField(Wistia, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Wistia.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/YouTube.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/YouTube.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar YouTube_exports = {};\n__export(YouTube_exports, {\n    default: ()=>YouTube\n});\nmodule.exports = __toCommonJS(YouTube_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://www.youtube.com/iframe_api\";\nconst SDK_GLOBAL = \"YT\";\nconst SDK_GLOBAL_READY = \"onYouTubeIframeAPIReady\";\nconst MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;\nconst MATCH_USER_UPLOADS = /user\\/([a-zA-Z0-9_-]+)\\/?/;\nconst MATCH_NOCOOKIE = /youtube-nocookie\\.com/;\nconst NOCOOKIE_HOST = \"https://www.youtube-nocookie.com\";\nclass YouTube extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"parsePlaylist\", (url)=>{\n            if (url instanceof Array) {\n                return {\n                    listType: \"playlist\",\n                    playlist: url.map(this.getID).join(\",\")\n                };\n            }\n            if (MATCH_PLAYLIST.test(url)) {\n                const [, playlistId] = url.match(MATCH_PLAYLIST);\n                return {\n                    listType: \"playlist\",\n                    list: playlistId.replace(/^UC/, \"UU\")\n                };\n            }\n            if (MATCH_USER_UPLOADS.test(url)) {\n                const [, username] = url.match(MATCH_USER_UPLOADS);\n                return {\n                    listType: \"user_uploads\",\n                    list: username\n                };\n            }\n            return {};\n        });\n        __publicField(this, \"onStateChange\", (event)=>{\n            const { data } = event;\n            const { onPlay, onPause, onBuffer, onBufferEnd, onEnded, onReady, loop, config: { playerVars, onUnstarted } } = this.props;\n            const { UNSTARTED, PLAYING, PAUSED, BUFFERING, ENDED, CUED } = window[SDK_GLOBAL].PlayerState;\n            if (data === UNSTARTED) onUnstarted();\n            if (data === PLAYING) {\n                onPlay();\n                onBufferEnd();\n            }\n            if (data === PAUSED) onPause();\n            if (data === BUFFERING) onBuffer();\n            if (data === ENDED) {\n                const isPlaylist = !!this.callPlayer(\"getPlaylist\");\n                if (loop && !isPlaylist) {\n                    if (playerVars.start) {\n                        this.seekTo(playerVars.start);\n                    } else {\n                        this.play();\n                    }\n                }\n                onEnded();\n            }\n            if (data === CUED) onReady();\n        });\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"mute\");\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"unMute\");\n        });\n        __publicField(this, \"ref\", (container)=>{\n            this.container = container;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    getID(url) {\n        if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {\n            return null;\n        }\n        return url.match(import_patterns.MATCH_URL_YOUTUBE)[1];\n    }\n    load(url, isReady) {\n        const { playing, muted, playsinline, controls, loop, config, onError } = this.props;\n        const { playerVars, embedOptions } = config;\n        const id = this.getID(url);\n        if (isReady) {\n            if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {\n                this.player.loadPlaylist(this.parsePlaylist(url));\n                return;\n            }\n            this.player.cueVideoById({\n                videoId: id,\n                startSeconds: (0, import_utils.parseStartTime)(url) || playerVars.start,\n                endSeconds: (0, import_utils.parseEndTime)(url) || playerVars.end\n            });\n            return;\n        }\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, (YT)=>YT.loaded).then((YT)=>{\n            if (!this.container) return;\n            this.player = new YT.Player(this.container, {\n                width: \"100%\",\n                height: \"100%\",\n                videoId: id,\n                playerVars: {\n                    autoplay: playing ? 1 : 0,\n                    mute: muted ? 1 : 0,\n                    controls: controls ? 1 : 0,\n                    start: (0, import_utils.parseStartTime)(url),\n                    end: (0, import_utils.parseEndTime)(url),\n                    origin: window.location.origin,\n                    playsinline: playsinline ? 1 : 0,\n                    ...this.parsePlaylist(url),\n                    ...playerVars\n                },\n                events: {\n                    onReady: ()=>{\n                        if (loop) {\n                            this.player.setLoop(true);\n                        }\n                        this.props.onReady();\n                    },\n                    onPlaybackRateChange: (event)=>this.props.onPlaybackRateChange(event.data),\n                    onPlaybackQualityChange: (event)=>this.props.onPlaybackQualityChange(event),\n                    onStateChange: this.onStateChange,\n                    onError: (event)=>onError(event.data)\n                },\n                host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : void 0,\n                ...embedOptions\n            });\n        }, onError);\n        if (embedOptions.events) {\n            console.warn(\"Using `embedOptions.events` will likely break things. Use ReactPlayer’s callback props instead, eg onReady, onPlay, onPause\");\n        }\n    }\n    play() {\n        this.callPlayer(\"playVideo\");\n    }\n    pause() {\n        this.callPlayer(\"pauseVideo\");\n    }\n    stop() {\n        if (!document.body.contains(this.callPlayer(\"getIframe\"))) return;\n        this.callPlayer(\"stopVideo\");\n    }\n    seekTo(amount, keepPlaying = false) {\n        this.callPlayer(\"seekTo\", amount);\n        if (!keepPlaying && !this.props.playing) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction * 100);\n    }\n    setPlaybackRate(rate) {\n        this.callPlayer(\"setPlaybackRate\", rate);\n    }\n    setLoop(loop) {\n        this.callPlayer(\"setLoop\", loop);\n    }\n    getDuration() {\n        return this.callPlayer(\"getDuration\");\n    }\n    getCurrentTime() {\n        return this.callPlayer(\"getCurrentTime\");\n    }\n    getSecondsLoaded() {\n        return this.callPlayer(\"getVideoLoadedFraction\") * this.getDuration();\n    }\n    render() {\n        const { display } = this.props;\n        const style = {\n            width: \"100%\",\n            height: \"100%\",\n            display\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style\n        }, /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            ref: this.ref\n        }));\n    }\n}\n__publicField(YouTube, \"displayName\", \"YouTube\");\n__publicField(YouTube, \"canPlay\", import_patterns.canPlay.youtube);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL1lvdVR1YmUuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFdBQVdDLE9BQU9DLE1BQU07QUFDNUIsSUFBSUMsWUFBWUYsT0FBT0csY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJKLE9BQU9LLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JOLE9BQU9PLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlUixPQUFPUyxjQUFjO0FBQ3hDLElBQUlDLGVBQWVWLE9BQU9XLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTVosVUFBVVksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxXQUFXLENBQUNDLFFBQVFDO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZnBCLFVBQVVtQixRQUFRRSxNQUFNO1FBQUVDLEtBQUtGLEdBQUcsQ0FBQ0MsS0FBSztRQUFFTixZQUFZO0lBQUs7QUFDL0Q7QUFDQSxJQUFJUSxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlaLE9BQU9ULGtCQUFrQnFCLE1BQ2hDLElBQUksQ0FBQ2pCLGFBQWFvQixJQUFJLENBQUNKLElBQUlYLFFBQVFBLFFBQVFhLFFBQ3pDMUIsVUFBVXdCLElBQUlYLEtBQUs7WUFBRVMsS0FBSyxJQUFNRyxJQUFJLENBQUNaLElBQUk7WUFBRUUsWUFBWSxDQUFFWSxDQUFBQSxPQUFPekIsaUJBQWlCdUIsTUFBTVosSUFBRyxLQUFNYyxLQUFLWixVQUFVO1FBQUM7SUFDdEg7SUFDQSxPQUFPUztBQUNUO0FBQ0EsSUFBSUssVUFBVSxD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Q1o7SUFDRjtJQUNBTyxVQUFVQyxRQUFRLEVBQUU7UUFDbEIsSUFBSSxDQUFDekYsVUFBVSxDQUFDLGFBQWF5RixXQUFXO0lBQzFDO0lBQ0FDLGdCQUFnQkMsSUFBSSxFQUFFO1FBQ3BCLElBQUksQ0FBQzNGLFVBQVUsQ0FBQyxtQkFBbUIyRjtJQUNyQztJQUNBakIsUUFBUXBELElBQUksRUFBRTtRQUNaLElBQUksQ0FBQ3RCLFVBQVUsQ0FBQyxXQUFXc0I7SUFDN0I7SUFDQXNFLGNBQWM7UUFDWixPQUFPLElBQUksQ0FBQzVGLFVBQVUsQ0FBQztJQUN6QjtJQUNBNkYsaUJBQWlCO1FBQ2YsT0FBTyxJQUFJLENBQUM3RixVQUFVLENBQUM7SUFDekI7SUFDQThGLG1CQUFtQjtRQUNqQixPQUFPLElBQUksQ0FBQzlGLFVBQVUsQ0FBQyw0QkFBNEIsSUFBSSxDQUFDNEYsV0FBVztJQUNyRTtJQUNBRyxTQUFTO1FBQ1AsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUN0RSxLQUFLO1FBQzlCLE1BQU11RSxRQUFRO1lBQ1o5QixPQUFPO1lBQ1BDLFFBQVE7WUFDUjRCO1FBQ0Y7UUFDQSxPQUFPLGFBQWEsR0FBRzlHLGFBQWFKLE9BQU8sQ0FBQ29ILGFBQWEsQ0FBQyxPQUFPO1lBQUVEO1FBQU0sR0FBRyxhQUFhLEdBQUcvRyxhQUFhSixPQUFPLENBQUNvSCxhQUFhLENBQUMsT0FBTztZQUFFQyxLQUFLLElBQUksQ0FBQ0EsR0FBRztRQUFDO0lBQ3hKO0FBQ0Y7QUFDQXZILGNBQWNHLFNBQVMsZUFBZTtBQUN0Q0gsY0FBY0csU0FBUyxXQUFXTSxnQkFBZ0IrRyxPQUFPLENBQUNDLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWxlYm90X2Zvcl9jaHJpc3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL1lvdVR1YmUuanM/ODc2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gIF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgWW91VHViZV9leHBvcnRzID0ge307XG5fX2V4cG9ydChZb3VUdWJlX2V4cG9ydHMsIHtcbiAgZGVmYXVsdDogKCkgPT4gWW91VHViZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhZb3VUdWJlX2V4cG9ydHMpO1xudmFyIGltcG9ydF9yZWFjdCA9IF9fdG9FU00ocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBpbXBvcnRfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG52YXIgaW1wb3J0X3BhdHRlcm5zID0gcmVxdWlyZShcIi4uL3BhdHRlcm5zXCIpO1xuY29uc3QgU0RLX1VSTCA9IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vaWZyYW1lX2FwaVwiO1xuY29uc3QgU0RLX0dMT0JBTCA9IFwiWVRcIjtcbmNvbnN0IFNES19HTE9CQUxfUkVBRFkgPSBcIm9uWW91VHViZUlmcmFtZUFQSVJlYWR5XCI7XG5jb25zdCBNQVRDSF9QTEFZTElTVCA9IC9bPyZdKD86bGlzdHxjaGFubmVsKT0oW2EtekEtWjAtOV8tXSspLztcbmNvbnN0IE1BVENIX1VTRVJfVVBMT0FEUyA9IC91c2VyXFwvKFthLXpBLVowLTlfLV0rKVxcLz8vO1xuY29uc3QgTUFUQ0hfTk9DT09LSUUgPSAveW91dHViZS1ub2Nvb2tpZVxcLmNvbS87XG5jb25zdCBOT0NPT0tJRV9IT1NUID0gXCJodHRwczovL3d3dy55b3V0dWJlLW5vY29va2llLmNvbVwiO1xuY2xhc3MgWW91VHViZSBleHRlbmRzIGltcG9ydF9yZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjYWxsUGxheWVyXCIsIGltcG9ydF91dGlscy5jYWxsUGxheWVyKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicGFyc2VQbGF5bGlzdFwiLCAodXJsKSA9PiB7XG4gICAgICBpZiAodXJsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaXN0VHlwZTogXCJwbGF5bGlzdFwiLFxuICAgICAgICAgIHBsYXlsaXN0OiB1cmwubWFwKHRoaXMuZ2V0SUQpLmpvaW4oXCIsXCIpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoTUFUQ0hfUExBWUxJU1QudGVzdCh1cmwpKSB7XG4gICAgICAgIGNvbnN0IFssIHBsYXlsaXN0SWRdID0gdXJsLm1hdGNoKE1BVENIX1BMQVlMSVNUKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaXN0VHlwZTogXCJwbGF5bGlzdFwiLFxuICAgICAgICAgIGxpc3Q6IHBsYXlsaXN0SWQucmVwbGFjZSgvXlVDLywgXCJVVVwiKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKE1BVENIX1VTRVJfVVBMT0FEUy50ZXN0KHVybCkpIHtcbiAgICAgICAgY29uc3QgWywgdXNlcm5hbWVdID0gdXJsLm1hdGNoKE1BVENIX1VTRVJfVVBMT0FEUyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGlzdFR5cGU6IFwidXNlcl91cGxvYWRzXCIsXG4gICAgICAgICAgbGlzdDogdXNlcm5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7fTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwib25TdGF0ZUNoYW5nZVwiLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gZXZlbnQ7XG4gICAgICBjb25zdCB7IG9uUGxheSwgb25QYXVzZSwgb25CdWZmZXIsIG9uQnVmZmVyRW5kLCBvbkVuZGVkLCBvblJlYWR5LCBsb29wLCBjb25maWc6IHsgcGxheWVyVmFycywgb25VbnN0YXJ0ZWQgfSB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IHsgVU5TVEFSVEVELCBQTEFZSU5HLCBQQVVTRUQsIEJVRkZFUklORywgRU5ERUQsIENVRUQgfSA9IHdpbmRvd1tTREtfR0xPQkFMXS5QbGF5ZXJTdGF0ZTtcbiAgICAgIGlmIChkYXRhID09PSBVTlNUQVJURUQpXG4gICAgICAgIG9uVW5zdGFydGVkKCk7XG4gICAgICBpZiAoZGF0YSA9PT0gUExBWUlORykge1xuICAgICAgICBvblBsYXkoKTtcbiAgICAgICAgb25CdWZmZXJFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhID09PSBQQVVTRUQpXG4gICAgICAgIG9uUGF1c2UoKTtcbiAgICAgIGlmIChkYXRhID09PSBCVUZGRVJJTkcpXG4gICAgICAgIG9uQnVmZmVyKCk7XG4gICAgICBpZiAoZGF0YSA9PT0gRU5ERUQpIHtcbiAgICAgICAgY29uc3QgaXNQbGF5bGlzdCA9ICEhdGhpcy5jYWxsUGxheWVyKFwiZ2V0UGxheWxpc3RcIik7XG4gICAgICAgIGlmIChsb29wICYmICFpc1BsYXlsaXN0KSB7XG4gICAgICAgICAgaWYgKHBsYXllclZhcnMuc3RhcnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2Vla1RvKHBsYXllclZhcnMuc3RhcnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb25FbmRlZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEgPT09IENVRUQpXG4gICAgICAgIG9uUmVhZHkoKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibXV0ZVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoXCJtdXRlXCIpO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ1bm11dGVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKFwidW5NdXRlXCIpO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyZWZcIiwgKGNvbnRhaW5lcikgPT4ge1xuICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfSk7XG4gIH1cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5vbk1vdW50ICYmIHRoaXMucHJvcHMub25Nb3VudCh0aGlzKTtcbiAgfVxuICBnZXRJRCh1cmwpIHtcbiAgICBpZiAoIXVybCB8fCB1cmwgaW5zdGFuY2VvZiBBcnJheSB8fCBNQVRDSF9QTEFZTElTVC50ZXN0KHVybCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdXJsLm1hdGNoKGltcG9ydF9wYXR0ZXJucy5NQVRDSF9VUkxfWU9VVFVCRSlbMV07XG4gIH1cbiAgbG9hZCh1cmwsIGlzUmVhZHkpIHtcbiAgICBjb25zdCB7IHBsYXlpbmcsIG11dGVkLCBwbGF5c2lubGluZSwgY29udHJvbHMsIGxvb3AsIGNvbmZpZywgb25FcnJvciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBsYXllclZhcnMsIGVtYmVkT3B0aW9ucyB9ID0gY29uZmlnO1xuICAgIGNvbnN0IGlkID0gdGhpcy5nZXRJRCh1cmwpO1xuICAgIGlmIChpc1JlYWR5KSB7XG4gICAgICBpZiAoTUFUQ0hfUExBWUxJU1QudGVzdCh1cmwpIHx8IE1BVENIX1VTRVJfVVBMT0FEUy50ZXN0KHVybCkgfHwgdXJsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIubG9hZFBsYXlsaXN0KHRoaXMucGFyc2VQbGF5bGlzdCh1cmwpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5wbGF5ZXIuY3VlVmlkZW9CeUlkKHtcbiAgICAgICAgdmlkZW9JZDogaWQsXG4gICAgICAgIHN0YXJ0U2Vjb25kczogKDAsIGltcG9ydF91dGlscy5wYXJzZVN0YXJ0VGltZSkodXJsKSB8fCBwbGF5ZXJWYXJzLnN0YXJ0LFxuICAgICAgICBlbmRTZWNvbmRzOiAoMCwgaW1wb3J0X3V0aWxzLnBhcnNlRW5kVGltZSkodXJsKSB8fCBwbGF5ZXJWYXJzLmVuZFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgICgwLCBpbXBvcnRfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMLCBTREtfR0xPQkFMX1JFQURZLCAoWVQpID0+IFlULmxvYWRlZCkudGhlbigoWVQpID0+IHtcbiAgICAgIGlmICghdGhpcy5jb250YWluZXIpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRoaXMucGxheWVyID0gbmV3IFlULlBsYXllcih0aGlzLmNvbnRhaW5lciwge1xuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgIHZpZGVvSWQ6IGlkLFxuICAgICAgICBwbGF5ZXJWYXJzOiB7XG4gICAgICAgICAgYXV0b3BsYXk6IHBsYXlpbmcgPyAxIDogMCxcbiAgICAgICAgICBtdXRlOiBtdXRlZCA/IDEgOiAwLFxuICAgICAgICAgIGNvbnRyb2xzOiBjb250cm9scyA/IDEgOiAwLFxuICAgICAgICAgIHN0YXJ0OiAoMCwgaW1wb3J0X3V0aWxzLnBhcnNlU3RhcnRUaW1lKSh1cmwpLFxuICAgICAgICAgIGVuZDogKDAsIGltcG9ydF91dGlscy5wYXJzZUVuZFRpbWUpKHVybCksXG4gICAgICAgICAgb3JpZ2luOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgICAgIHBsYXlzaW5saW5lOiBwbGF5c2lubGluZSA/IDEgOiAwLFxuICAgICAgICAgIC4uLnRoaXMucGFyc2VQbGF5bGlzdCh1cmwpLFxuICAgICAgICAgIC4uLnBsYXllclZhcnNcbiAgICAgICAgfSxcbiAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgb25SZWFkeTogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGxvb3ApIHtcbiAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuc2V0TG9vcCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHJvcHMub25SZWFkeSgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25QbGF5YmFja1JhdGVDaGFuZ2U6IChldmVudCkgPT4gdGhpcy5wcm9wcy5vblBsYXliYWNrUmF0ZUNoYW5nZShldmVudC5kYXRhKSxcbiAgICAgICAgICBvblBsYXliYWNrUXVhbGl0eUNoYW5nZTogKGV2ZW50KSA9PiB0aGlzLnByb3BzLm9uUGxheWJhY2tRdWFsaXR5Q2hhbmdlKGV2ZW50KSxcbiAgICAgICAgICBvblN0YXRlQ2hhbmdlOiB0aGlzLm9uU3RhdGVDaGFuZ2UsXG4gICAgICAgICAgb25FcnJvcjogKGV2ZW50KSA9PiBvbkVycm9yKGV2ZW50LmRhdGEpXG4gICAgICAgIH0sXG4gICAgICAgIGhvc3Q6IE1BVENIX05PQ09PS0lFLnRlc3QodXJsKSA/IE5PQ09PS0lFX0hPU1QgOiB2b2lkIDAsXG4gICAgICAgIC4uLmVtYmVkT3B0aW9uc1xuICAgICAgfSk7XG4gICAgfSwgb25FcnJvcik7XG4gICAgaWYgKGVtYmVkT3B0aW9ucy5ldmVudHMpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlVzaW5nIGBlbWJlZE9wdGlvbnMuZXZlbnRzYCB3aWxsIGxpa2VseSBicmVhayB0aGluZ3MuIFVzZSBSZWFjdFBsYXllclxcdTIwMTlzIGNhbGxiYWNrIHByb3BzIGluc3RlYWQsIGVnIG9uUmVhZHksIG9uUGxheSwgb25QYXVzZVwiKTtcbiAgICB9XG4gIH1cbiAgcGxheSgpIHtcbiAgICB0aGlzLmNhbGxQbGF5ZXIoXCJwbGF5VmlkZW9cIik7XG4gIH1cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwicGF1c2VWaWRlb1wiKTtcbiAgfVxuICBzdG9wKCkge1xuICAgIGlmICghZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLmNhbGxQbGF5ZXIoXCJnZXRJZnJhbWVcIikpKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuY2FsbFBsYXllcihcInN0b3BWaWRlb1wiKTtcbiAgfVxuICBzZWVrVG8oYW1vdW50LCBrZWVwUGxheWluZyA9IGZhbHNlKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwic2Vla1RvXCIsIGFtb3VudCk7XG4gICAgaWYgKCFrZWVwUGxheWluZyAmJiAhdGhpcy5wcm9wcy5wbGF5aW5nKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuICB9XG4gIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgIHRoaXMuY2FsbFBsYXllcihcInNldFZvbHVtZVwiLCBmcmFjdGlvbiAqIDEwMCk7XG4gIH1cbiAgc2V0UGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICB0aGlzLmNhbGxQbGF5ZXIoXCJzZXRQbGF5YmFja1JhdGVcIiwgcmF0ZSk7XG4gIH1cbiAgc2V0TG9vcChsb29wKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwic2V0TG9vcFwiLCBsb29wKTtcbiAgfVxuICBnZXREdXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jYWxsUGxheWVyKFwiZ2V0RHVyYXRpb25cIik7XG4gIH1cbiAgZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbFBsYXllcihcImdldEN1cnJlbnRUaW1lXCIpO1xuICB9XG4gIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbFBsYXllcihcImdldFZpZGVvTG9hZGVkRnJhY3Rpb25cIikgKiB0aGlzLmdldER1cmF0aW9uKCk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZGlzcGxheSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICBkaXNwbGF5XG4gICAgfTtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGltcG9ydF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZSB9LCAvKiBAX19QVVJFX18gKi8gaW1wb3J0X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHJlZjogdGhpcy5yZWYgfSkpO1xuICB9XG59XG5fX3B1YmxpY0ZpZWxkKFlvdVR1YmUsIFwiZGlzcGxheU5hbWVcIiwgXCJZb3VUdWJlXCIpO1xuX19wdWJsaWNGaWVsZChZb3VUdWJlLCBcImNhblBsYXlcIiwgaW1wb3J0X3BhdHRlcm5zLmNhblBsYXkueW91dHViZSk7XG4iXSwibmFtZXMiOlsiX19jcmVhdGUiLCJPYmplY3QiLCJjcmVhdGUiLCJfX2RlZlByb3AiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2dldFByb3RvT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJnZXQiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJjYWxsIiwiX190b0VTTSIsIm1vZCIsImlzTm9kZU1vZGUiLCJfX2VzTW9kdWxlIiwiX190b0NvbW1vbkpTIiwiX19wdWJsaWNGaWVsZCIsIllvdVR1YmVfZXhwb3J0cyIsImRlZmF1bHQiLCJZb3VUdWJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF9yZWFjdCIsInJlcXVpcmUiLCJpbXBvcnRfdXRpbHMiLCJpbXBvcnRfcGF0dGVybnMiLCJTREtfVVJMIiwiU0RLX0dMT0JBTCIsIlNES19HTE9CQUxfUkVBRFkiLCJNQVRDSF9QTEFZTElTVCIsIk1BVENIX1VTRVJfVVBMT0FEUyIsIk1BVENIX05PQ09PS0lFIiwiTk9DT09LSUVfSE9TVCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiY2FsbFBsYXllciIsInVybCIsIkFycmF5IiwibGlzdFR5cGUiLCJwbGF5bGlzdCIsIm1hcCIsImdldElEIiwiam9pbiIsInRlc3QiLCJwbGF5bGlzdElkIiwibWF0Y2giLCJsaXN0IiwicmVwbGFjZSIsInVzZXJuYW1lIiwiZXZlbnQiLCJkYXRhIiwib25QbGF5Iiwib25QYXVzZSIsIm9uQnVmZmVyIiwib25CdWZmZXJFbmQiLCJvbkVuZGVkIiwib25SZWFkeSIsImxvb3AiLCJjb25maWciLCJwbGF5ZXJWYXJzIiwib25VbnN0YXJ0ZWQiLCJwcm9wcyIsIlVOU1RBUlRFRCIsIlBMQVlJTkciLCJQQVVTRUQiLCJCVUZGRVJJTkciLCJFTkRFRCIsIkNVRUQiLCJ3aW5kb3ciLCJQbGF5ZXJTdGF0ZSIsImlzUGxheWxpc3QiLCJzdGFydCIsInNlZWtUbyIsInBsYXkiLCJjb250YWluZXIiLCJjb21wb25lbnREaWRNb3VudCIsIm9uTW91bnQiLCJNQVRDSF9VUkxfWU9VVFVCRSIsImxvYWQiLCJpc1JlYWR5IiwicGxheWluZyIsIm11dGVkIiwicGxheXNpbmxpbmUiLCJjb250cm9scyIsIm9uRXJyb3IiLCJlbWJlZE9wdGlvbnMiLCJpZCIsInBsYXllciIsImxvYWRQbGF5bGlzdCIsInBhcnNlUGxheWxpc3QiLCJjdWVWaWRlb0J5SWQiLCJ2aWRlb0lkIiwic3RhcnRTZWNvbmRzIiwicGFyc2VTdGFydFRpbWUiLCJlbmRTZWNvbmRzIiwicGFyc2VFbmRUaW1lIiwiZW5kIiwiZ2V0U0RLIiwiWVQiLCJsb2FkZWQiLCJ0aGVuIiwiUGxheWVyIiwid2lkdGgiLCJoZWlnaHQiLCJhdXRvcGxheSIsIm11dGUiLCJvcmlnaW4iLCJsb2NhdGlvbiIsImV2ZW50cyIsInNldExvb3AiLCJvblBsYXliYWNrUmF0ZUNoYW5nZSIsIm9uUGxheWJhY2tRdWFsaXR5Q2hhbmdlIiwib25TdGF0ZUNoYW5nZSIsImhvc3QiLCJjb25zb2xlIiwid2FybiIsInBhdXNlIiwic3RvcCIsImRvY3VtZW50IiwiYm9keSIsImNvbnRhaW5zIiwiYW1vdW50Iiwia2VlcFBsYXlpbmciLCJzZXRWb2x1bWUiLCJmcmFjdGlvbiIsInNldFBsYXliYWNrUmF0ZSIsInJhdGUiLCJnZXREdXJhdGlvbiIsImdldEN1cnJlbnRUaW1lIiwiZ2V0U2Vjb25kc0xvYWRlZCIsInJlbmRlciIsImRpc3BsYXkiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiLCJjYW5QbGF5IiwieW91dHViZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/YouTube.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/index.js":
/*!********************************************************!*\
  !*** ./node_modules/react-player/lib/players/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar players_exports = {};\n__export(players_exports, {\n    default: ()=>players_default\n});\nmodule.exports = __toCommonJS(players_exports);\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nvar players_default = [\n    {\n        key: \"youtube\",\n        name: \"YouTube\",\n        canPlay: import_patterns.canPlay.youtube,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerYouTube */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./YouTube */ \"(ssr)/./node_modules/react-player/lib/players/YouTube.js\", 23)))\n    },\n    {\n        key: \"soundcloud\",\n        name: \"SoundCloud\",\n        canPlay: import_patterns.canPlay.soundcloud,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerSoundCloud */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./SoundCloud */ \"(ssr)/./node_modules/react-player/lib/players/SoundCloud.js\", 23)))\n    },\n    {\n        key: \"vimeo\",\n        name: \"Vimeo\",\n        canPlay: import_patterns.canPlay.vimeo,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerVimeo */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Vimeo */ \"(ssr)/./node_modules/react-player/lib/players/Vimeo.js\", 23)))\n    },\n    {\n        key: \"facebook\",\n        name: \"Facebook\",\n        canPlay: import_patterns.canPlay.facebook,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerFacebook */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Facebook */ \"(ssr)/./node_modules/react-player/lib/players/Facebook.js\", 23)))\n    },\n    {\n        key: \"streamable\",\n        name: \"Streamable\",\n        canPlay: import_patterns.canPlay.streamable,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerStreamable */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Streamable */ \"(ssr)/./node_modules/react-player/lib/players/Streamable.js\", 23)))\n    },\n    {\n        key: \"wistia\",\n        name: \"Wistia\",\n        canPlay: import_patterns.canPlay.wistia,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerWistia */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Wistia */ \"(ssr)/./node_modules/react-player/lib/players/Wistia.js\", 23)))\n    },\n    {\n        key: \"twitch\",\n        name: \"Twitch\",\n        canPlay: import_patterns.canPlay.twitch,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerTwitch */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Twitch */ \"(ssr)/./node_modules/react-player/lib/players/Twitch.js\", 23)))\n    },\n    {\n        key: \"dailymotion\",\n        name: \"DailyMotion\",\n        canPlay: import_patterns.canPlay.dailymotion,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerDailyMotion */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./DailyMotion */ \"(ssr)/./node_modules/react-player/lib/players/DailyMotion.js\", 23)))\n    },\n    {\n        key: \"mixcloud\",\n        name: \"Mixcloud\",\n        canPlay: import_patterns.canPlay.mixcloud,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerMixcloud */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Mixcloud */ \"(ssr)/./node_modules/react-player/lib/players/Mixcloud.js\", 23)))\n    },\n    {\n        key: \"vidyard\",\n        name: \"Vidyard\",\n        canPlay: import_patterns.canPlay.vidyard,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerVidyard */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Vidyard */ \"(ssr)/./node_modules/react-player/lib/players/Vidyard.js\", 23)))\n    },\n    {\n        key: \"kaltura\",\n        name: \"Kaltura\",\n        canPlay: import_patterns.canPlay.kaltura,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerKaltura */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Kaltura */ \"(ssr)/./node_modules/react-player/lib/players/Kaltura.js\", 23)))\n    },\n    {\n        key: \"file\",\n        name: \"FilePlayer\",\n        canPlay: import_patterns.canPlay.file,\n        canEnablePIP: (url)=>{\n            return import_patterns.canPlay.file(url) && (document.pictureInPictureEnabled || (0, import_utils.supportsWebKitPresentationMode)()) && !import_patterns.AUDIO_EXTENSIONS.test(url);\n        },\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerFilePlayer */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./FilePlayer */ \"(ssr)/./node_modules/react-player/lib/players/FilePlayer.js\", 23)))\n    }\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/props.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/props.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar props_exports = {};\n__export(props_exports, {\n    defaultProps: ()=>defaultProps,\n    propTypes: ()=>propTypes\n});\nmodule.exports = __toCommonJS(props_exports);\nvar import_prop_types = __toESM(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nconst { string, bool, number, array, oneOfType, shape, object, func, node } = import_prop_types.default;\nconst propTypes = {\n    url: oneOfType([\n        string,\n        array,\n        object\n    ]),\n    playing: bool,\n    loop: bool,\n    controls: bool,\n    volume: number,\n    muted: bool,\n    playbackRate: number,\n    width: oneOfType([\n        string,\n        number\n    ]),\n    height: oneOfType([\n        string,\n        number\n    ]),\n    style: object,\n    progressInterval: number,\n    playsinline: bool,\n    pip: bool,\n    stopOnUnmount: bool,\n    light: oneOfType([\n        bool,\n        string,\n        object\n    ]),\n    playIcon: node,\n    previewTabIndex: number,\n    fallback: node,\n    oEmbedUrl: string,\n    wrapper: oneOfType([\n        string,\n        func,\n        shape({\n            render: func.isRequired\n        })\n    ]),\n    config: shape({\n        soundcloud: shape({\n            options: object\n        }),\n        youtube: shape({\n            playerVars: object,\n            embedOptions: object,\n            onUnstarted: func\n        }),\n        facebook: shape({\n            appId: string,\n            version: string,\n            playerId: string,\n            attributes: object\n        }),\n        dailymotion: shape({\n            params: object\n        }),\n        vimeo: shape({\n            playerOptions: object,\n            title: string\n        }),\n        file: shape({\n            attributes: object,\n            tracks: array,\n            forceVideo: bool,\n            forceAudio: bool,\n            forceHLS: bool,\n            forceSafariHLS: bool,\n            forceDisableHls: bool,\n            forceDASH: bool,\n            forceFLV: bool,\n            hlsOptions: object,\n            hlsVersion: string,\n            dashVersion: string,\n            flvVersion: string\n        }),\n        wistia: shape({\n            options: object,\n            playerId: string,\n            customControls: array\n        }),\n        mixcloud: shape({\n            options: object\n        }),\n        twitch: shape({\n            options: object,\n            playerId: string\n        }),\n        vidyard: shape({\n            options: object\n        })\n    }),\n    onReady: func,\n    onStart: func,\n    onPlay: func,\n    onPause: func,\n    onBuffer: func,\n    onBufferEnd: func,\n    onEnded: func,\n    onError: func,\n    onDuration: func,\n    onSeek: func,\n    onPlaybackRateChange: func,\n    onPlaybackQualityChange: func,\n    onProgress: func,\n    onClickPreview: func,\n    onEnablePIP: func,\n    onDisablePIP: func\n};\nconst noop = ()=>{};\nconst defaultProps = {\n    playing: false,\n    loop: false,\n    controls: false,\n    volume: null,\n    muted: false,\n    playbackRate: 1,\n    width: \"640px\",\n    height: \"360px\",\n    style: {},\n    progressInterval: 1e3,\n    playsinline: false,\n    pip: false,\n    stopOnUnmount: true,\n    light: false,\n    fallback: null,\n    wrapper: \"div\",\n    previewTabIndex: 0,\n    oEmbedUrl: \"https://noembed.com/embed?url={url}\",\n    config: {\n        soundcloud: {\n            options: {\n                visual: true,\n                // Undocumented, but makes player fill container and look better\n                buying: false,\n                liking: false,\n                download: false,\n                sharing: false,\n                show_comments: false,\n                show_playcount: false\n            }\n        },\n        youtube: {\n            playerVars: {\n                playsinline: 1,\n                showinfo: 0,\n                rel: 0,\n                iv_load_policy: 3,\n                modestbranding: 1\n            },\n            embedOptions: {},\n            onUnstarted: noop\n        },\n        facebook: {\n            appId: \"1309697205772819\",\n            version: \"v3.3\",\n            playerId: null,\n            attributes: {}\n        },\n        dailymotion: {\n            params: {\n                api: 1,\n                \"endscreen-enable\": false\n            }\n        },\n        vimeo: {\n            playerOptions: {\n                autopause: false,\n                byline: false,\n                portrait: false,\n                title: false\n            },\n            title: null\n        },\n        file: {\n            attributes: {},\n            tracks: [],\n            forceVideo: false,\n            forceAudio: false,\n            forceHLS: false,\n            forceDASH: false,\n            forceFLV: false,\n            hlsOptions: {},\n            hlsVersion: \"1.1.4\",\n            dashVersion: \"3.1.3\",\n            flvVersion: \"1.5.0\",\n            forceDisableHls: false\n        },\n        wistia: {\n            options: {},\n            playerId: null,\n            customControls: null\n        },\n        mixcloud: {\n            options: {\n                hide_cover: 1\n            }\n        },\n        twitch: {\n            options: {},\n            playerId: null\n        },\n        vidyard: {\n            options: {}\n        }\n    },\n    onReady: noop,\n    onStart: noop,\n    onPlay: noop,\n    onPause: noop,\n    onBuffer: noop,\n    onBufferEnd: noop,\n    onEnded: noop,\n    onError: noop,\n    onDuration: noop,\n    onSeek: noop,\n    onPlaybackRateChange: noop,\n    onPlaybackQualityChange: noop,\n    onProgress: noop,\n    onClickPreview: noop,\n    onEnablePIP: noop,\n    onDisablePIP: noop\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/props.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/utils.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/utils.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n    callPlayer: ()=>callPlayer,\n    getConfig: ()=>getConfig,\n    getSDK: ()=>getSDK,\n    isBlobUrl: ()=>isBlobUrl,\n    isMediaStream: ()=>isMediaStream,\n    lazy: ()=>lazy,\n    omit: ()=>omit,\n    parseEndTime: ()=>parseEndTime,\n    parseStartTime: ()=>parseStartTime,\n    queryString: ()=>queryString,\n    randomString: ()=>randomString,\n    supportsWebKitPresentationMode: ()=>supportsWebKitPresentationMode\n});\nmodule.exports = __toCommonJS(utils_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_load_script = __toESM(__webpack_require__(/*! load-script */ \"(ssr)/./node_modules/load-script/index.js\"));\nvar import_deepmerge = __toESM(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\"));\nconst lazy = (componentImportFn)=>import_react.default.lazy(async ()=>{\n        const obj = await componentImportFn();\n        return typeof obj.default === \"function\" ? obj : obj.default;\n    });\nconst MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;\nconst MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;\nconst MATCH_START_STAMP = /(\\d+)(h|m|s)/g;\nconst MATCH_NUMERIC = /^\\d+$/;\nfunction parseTimeParam(url, pattern) {\n    if (url instanceof Array) {\n        return void 0;\n    }\n    const match = url.match(pattern);\n    if (match) {\n        const stamp = match[1];\n        if (stamp.match(MATCH_START_STAMP)) {\n            return parseTimeString(stamp);\n        }\n        if (MATCH_NUMERIC.test(stamp)) {\n            return parseInt(stamp);\n        }\n    }\n    return void 0;\n}\nfunction parseTimeString(stamp) {\n    let seconds = 0;\n    let array = MATCH_START_STAMP.exec(stamp);\n    while(array !== null){\n        const [, count, period] = array;\n        if (period === \"h\") seconds += parseInt(count, 10) * 60 * 60;\n        if (period === \"m\") seconds += parseInt(count, 10) * 60;\n        if (period === \"s\") seconds += parseInt(count, 10);\n        array = MATCH_START_STAMP.exec(stamp);\n    }\n    return seconds;\n}\nfunction parseStartTime(url) {\n    return parseTimeParam(url, MATCH_START_QUERY);\n}\nfunction parseEndTime(url) {\n    return parseTimeParam(url, MATCH_END_QUERY);\n}\nfunction randomString() {\n    return Math.random().toString(36).substr(2, 5);\n}\nfunction queryString(object) {\n    return Object.keys(object).map((key)=>`${key}=${object[key]}`).join(\"&\");\n}\nfunction getGlobal(key) {\n    if (window[key]) {\n        return window[key];\n    }\n    if (window.exports && window.exports[key]) {\n        return window.exports[key];\n    }\n    if (window.module && window.module.exports && window.module.exports[key]) {\n        return window.module.exports[key];\n    }\n    return null;\n}\nconst requests = {};\nconst getSDK = enableStubOn(function getSDK2(url, sdkGlobal, sdkReady = null, isLoaded = ()=>true, fetchScript = import_load_script.default) {\n    const existingGlobal = getGlobal(sdkGlobal);\n    if (existingGlobal && isLoaded(existingGlobal)) {\n        return Promise.resolve(existingGlobal);\n    }\n    return new Promise((resolve, reject)=>{\n        if (requests[url]) {\n            requests[url].push({\n                resolve,\n                reject\n            });\n            return;\n        }\n        requests[url] = [\n            {\n                resolve,\n                reject\n            }\n        ];\n        const onLoaded = (sdk)=>{\n            requests[url].forEach((request)=>request.resolve(sdk));\n        };\n        if (sdkReady) {\n            const previousOnReady = window[sdkReady];\n            window[sdkReady] = function() {\n                if (previousOnReady) previousOnReady();\n                onLoaded(getGlobal(sdkGlobal));\n            };\n        }\n        fetchScript(url, (err)=>{\n            if (err) {\n                requests[url].forEach((request)=>request.reject(err));\n                requests[url] = null;\n            } else if (!sdkReady) {\n                onLoaded(getGlobal(sdkGlobal));\n            }\n        });\n    });\n});\nfunction getConfig(props, defaultProps) {\n    return (0, import_deepmerge.default)(defaultProps.config, props.config);\n}\nfunction omit(object, ...arrays) {\n    const omitKeys = [].concat(...arrays);\n    const output = {};\n    const keys = Object.keys(object);\n    for (const key of keys){\n        if (omitKeys.indexOf(key) === -1) {\n            output[key] = object[key];\n        }\n    }\n    return output;\n}\nfunction callPlayer(method, ...args) {\n    if (!this.player || !this.player[method]) {\n        let message = `ReactPlayer: ${this.constructor.displayName} player could not call %c${method}%c \\u2013 `;\n        if (!this.player) {\n            message += \"The player was not available\";\n        } else if (!this.player[method]) {\n            message += \"The method was not available\";\n        }\n        console.warn(message, \"font-weight: bold\", \"\");\n        return null;\n    }\n    return this.player[method](...args);\n}\nfunction isMediaStream(url) {\n    return  false && 0;\n}\nfunction isBlobUrl(url) {\n    return /^blob:/.test(url);\n}\nfunction supportsWebKitPresentationMode(video = document.createElement(\"video\")) {\n    const notMobile = /iPhone|iPod/.test(navigator.userAgent) === false;\n    return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === \"function\" && notMobile;\n}\nfunction enableStubOn(fn) {\n    if (false) {}\n    return fn;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/utils.js\n");

/***/ })

};
;